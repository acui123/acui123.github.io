{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\qd\\blog\\vuepress-blog-demo\\xcui-blog\\node_modules\\babel-loader\\lib\\index.js??ref--3-1!C:\\Users\\Administrator\\Desktop\\qd\\blog\\vuepress-blog-demo\\xcui-blog\\node_modules\\@moefe\\vue-aplayer\\dist\\VueAPlayer.common.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\qd\\blog\\vuepress-blog-demo\\xcui-blog\\node_modules\\@moefe\\vue-aplayer\\dist\\VueAPlayer.common.js","mtime":1544600652000},{"path":"C:\\Users\\Administrator\\Desktop\\qd\\blog\\vuepress-blog-demo\\xcui-blog\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\qd\\blog\\vuepress-blog-demo\\xcui-blog\\node_modules\\babel-loader\\lib\\index.js","mtime":315532800000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["../src/api.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAAA,IAAA,MAAA,CAAA,CAAA,GAAA,IAAA;AAmCA;;AAIU;AAAA;;AAJV;;AAAA,WAAA,MAAA,CAAA,OAAA;AAAA;AAAA;AAKE;;AAKA;;;;;AACF;;;AAAC,EAAA,mBAAA,CAAA,CAAA,GAAA,OAAA;AAAD;;AAXA;AAIU;;AAJG;;AAAA,EAAA,mBAAA,CAAS,CAAT,GAAS,gBAAT;AAab;;;;;AAEG;;AAAA,EAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,OAAA,EAAA,IAAA,EAAA,MAAA,EAAA;AACH;AAAA,QAAA,CAAA,mBAC0D,CAAA,CAD1D,CAC0D,OAD1D,EAC0D,IAD1D,CAAA,EAC0D;AAExD;AAAO,MAAA,MAAA,CAAA,cAAA,CAAW,OAAX,EAA+B,IAA/B,EAA+B;AAAA,QAAA,UAAA,EAAA,IAAA;AAAA,QAAA,GAAA,EAAA;AAAA,OAA/B;AACT;AAAC;AAJD;;AAAA,GADG;AAgBH;;AACE;AAAA;;AACA;;;AAAA,EAAA,mBAAmB,CAAA,CAAnB,GAAwB,UAAC,OAAD,EAAC;AAC1B;AAAC,QAAA,OAAA,MAAA,KAAA,WAAA,IAAA,MAAA,CAAA,WAAA,EAAA;AAEF;AAAA,MAAA,MAAA,CAAA,cAAA,CAAA,OAAA,EAAA,MAAA,CAAA,WAAA,EAAA;AAAA,QAAA,KAAA,EAAA;AAAA,OAAA;;;;;;;;;;GAHE;;;;;;AASC;AAAA;;AACH;AAAA;;AAKE;AAAA;;AACF;AAAC;;AAND;;;AAAA,EAAA,mBAMC,CAAA,CAND,GAMC,UAAA,KAAA,EAAA,IAAA,EAAA;AAED;AAAA,QAAA,IAAA,GAAA,CAAA,EACE,KAAA,GAAA,mBAAiB,CAAA,KAAA,CAAjB;AAEA;;AAAO,QAAA,IAAA,GAAA,CAAA,EAAoB,OAAC,KAAD;AAC7B;;AAAC,QAAA,IAAA,GAAA,CAAA,IAAA,SAAA,KAAA,MAAA,QAAA,IAAA,KAAA,IAAA,KAAA,CAAA,UAAA,EAAA,OAAA,KAAA;AAJD;;AAAA,QAAA,EAAA,GAAA,MAAA,CAAA,MAAA,CAAA,IAAA,CAAA;AAMA;;AAAA,IAAA,mBACE,CAAA,CADF,CACE,EADF;AAGE;;;AAAO,IAAA,MAAA,CAAA,cAAA,CAAqB,EAArB,EAAqB,SAArB,EAAqB;AAAA,MAAA,UAAA,EAAA,IAAA;AAAA,MAAA,KAAA,EAAA;AAAA,KAArB;AACT;;AAAC,QAAA,IAAA,GAAA,CAAA,IAAA,OAAA,KAAA,IAAA,QAAA,EAAA,KAAA,IAAA,GAAA,IAAA,KAAA;AAAA,MAAA,mBAAA,CAAA,CAAA,CAAA,EAAA,EAAA,GAAA,EAAA,UAAA,GAAA,EAAA;AAAA,eAAA,KAAA,CAAA,GAAA,CAAA;AAAA,OAAA,CAAA,IAAA,CAAA,IAAA,EAAA,GAAA,CAAA;AAAA;AAJD;;AAAA,WAAA,EAAA;AAMA;AAAA,GApBA;AAuBE;;AACF;AAAC;;AAJD;;;AAAA,EAAA,mBAAA,CAAA,CAAA,GAAA,UAAA,MAAA,EAIC;AAyHD;AAAA,QAAA,MAAA,GAAA,MAAA,IACE,MACA,CAAA,UAFF;AAIE;AAAO,aAAA,UAAA,GAAA;AAAA,aAAA,MAAA,CAAA,SAAA,CAAA;AAAA,KAJT;AAKI;AAAA,aAAA,gBAAA,GAAmB;AAAA,aAAA,MAAA;AAAA,KALvB;;;AAMM,IAAA,mBAAkB,CAAG,CAArB,CAAqB,MAArB,EAA6B,GAA7B,EAAmC,MAAnC;;;;AACE,WAAM,MAAN;;AAEF,GAtIN;AAuII;;AACA;AAAA;;;;;AACE,EAAA,mBAAO,CAAA,CAAP,GAAO,UAAuB,MAAvB,EAAiC,QAAjC,EAAuC;AAAE,WAAA,MAAW,CAAE,SAAb,CAAc,cAAd,CAAc,IAAd,CAAc,MAAd,EAAc,QAAd,CAAA;AAAc,GAA9D;AACF;;AACD;AAAC;;AACJ;;;AAAC,EAAA,mBAAA,CAAA,CAAA,GAAA,EAAA;AAED;;AAOE;;AACE;AAAA;;;;AACE,SAAA,mBAAW,CAAA,mBAAgB,CAAA,CAAhB,GAAgB,MAAhB,CAAX;AACF;AAAC,C;AACD;;;AACE;;AAEF;;AACE,cAAA,MAAA,EAAO,OAAP,EAAO,mBAAP,EAA8B;AAEjC;;AAGU,QAAA,OAAA,GAAA,mBAMT,CAAA,MAAA,CANS;;AAQb,QAAA,OAAA,GAAA,mBAAA,CAAA,MAAA,CAAA;;QAUE,QAAO,GAAA,mBAAA,CAAuB,MAAvB,C;;AACT,QAAC,IAAA,GAAA,mBAAA,CAAA,MAAA,CAAD;;AAXA,QAAA,SAAA,GAAA,mBAAA,CAAA,MAAA,CAAA;;AAaA,QAAA,WAAA,GAAA,mBAAA,CAAA,MAAA,CAAA;;;;AAEG,QAAA,cAAA,GAAA,mBAAA,CAAA,MAAA,CAAA;;AACU,QAAA,QAAA,GAAA,mBAAY,CAAA,MAAA,CAAZ,CAAY,UAAZ,CAAA;;AACA,QAAA,KAAA,GAAA,EAAA,GAAA,IAAA,IAAa,UAAA,GAAA,IAAA,EAAb,CAAA,CA9BuB,CA8BO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAjCrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;GAAA;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;GAAA;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAAA;;;;;;;;;;;AAAA,C","sourceRoot":"","sourcesContent":["module.exports =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// define __esModule on exports\n/******/ \t__webpack_require__.r = function(exports) {\n/******/ \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t}\n/******/ \t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t};\n/******/\n/******/ \t// create a fake namespace object\n/******/ \t// mode & 1: value is a module id, require it\n/******/ \t// mode & 2: merge all properties of value into the ns\n/******/ \t// mode & 4: return value when already ns object\n/******/ \t// mode & 8|1: behave like require\n/******/ \t__webpack_require__.t = function(value, mode) {\n/******/ \t\tif(mode & 1) value = __webpack_require__(value);\n/******/ \t\tif(mode & 8) return value;\n/******/ \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n/******/ \t\tvar ns = Object.create(null);\n/******/ \t\t__webpack_require__.r(ns);\n/******/ \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n/******/ \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n/******/ \t\treturn ns;\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = \"fb15\");\n/******/ })\n/************************************************************************/\n/******/ ({\n\n/***/ \"01f9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY = __webpack_require__(\"2d00\");\nvar $export = __webpack_require__(\"5ca1\");\nvar redefine = __webpack_require__(\"2aba\");\nvar hide = __webpack_require__(\"32e9\");\nvar Iterators = __webpack_require__(\"84f2\");\nvar $iterCreate = __webpack_require__(\"41a0\");\nvar setToStringTag = __webpack_require__(\"7f20\");\nvar getPrototypeOf = __webpack_require__(\"38fd\");\nvar ITERATOR = __webpack_require__(\"2b4c\")('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && typeof IteratorPrototype[ITERATOR] != 'function') hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n\n\n/***/ }),\n\n/***/ \"0a49\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = __webpack_require__(\"9b43\");\nvar IObject = __webpack_require__(\"626a\");\nvar toObject = __webpack_require__(\"4bf8\");\nvar toLength = __webpack_require__(\"9def\");\nvar asc = __webpack_require__(\"cd1c\");\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"0bfb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = __webpack_require__(\"cb7c\");\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"0d58\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = __webpack_require__(\"ce10\");\nvar enumBugKeys = __webpack_require__(\"e11e\");\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n\n\n/***/ }),\n\n/***/ \"1169\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.2 IsArray(argument)\nvar cof = __webpack_require__(\"2d95\");\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n\n\n/***/ }),\n\n/***/ \"11e9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar pIE = __webpack_require__(\"52a7\");\nvar createDesc = __webpack_require__(\"4630\");\nvar toIObject = __webpack_require__(\"6821\");\nvar toPrimitive = __webpack_require__(\"6a99\");\nvar has = __webpack_require__(\"69a8\");\nvar IE8_DOM_DEFINE = __webpack_require__(\"c69a\");\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = __webpack_require__(\"9e1e\") ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n\n\n/***/ }),\n\n/***/ \"1495\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"86cc\");\nvar anObject = __webpack_require__(\"cb7c\");\nvar getKeys = __webpack_require__(\"0d58\");\n\nmodule.exports = __webpack_require__(\"9e1e\") ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"1991\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(\"9b43\");\nvar invoke = __webpack_require__(\"31f4\");\nvar html = __webpack_require__(\"fab2\");\nvar cel = __webpack_require__(\"230e\");\nvar global = __webpack_require__(\"7726\");\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (__webpack_require__(\"2d95\")(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n\n\n/***/ }),\n\n/***/ \"1fa8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// call something on iterator step with safe closing on error\nvar anObject = __webpack_require__(\"cb7c\");\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"20d6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = __webpack_require__(\"5ca1\");\nvar $find = __webpack_require__(\"0a49\")(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(\"9c6c\")(KEY);\n\n\n/***/ }),\n\n/***/ \"214f\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar hide = __webpack_require__(\"32e9\");\nvar redefine = __webpack_require__(\"2aba\");\nvar fails = __webpack_require__(\"79e5\");\nvar defined = __webpack_require__(\"be13\");\nvar wks = __webpack_require__(\"2b4c\");\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n  var fns = exec(defined, SYMBOL, ''[KEY]);\n  var strfn = fns[0];\n  var rxfn = fns[1];\n  if (fails(function () {\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  })) {\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n\n\n/***/ }),\n\n/***/ \"230e\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nvar document = __webpack_require__(\"7726\").document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n\n\n/***/ }),\n\n/***/ \"2350\":\n/***/ (function(module, exports) {\n\n/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n/***/ }),\n\n/***/ \"23c6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = __webpack_require__(\"2d95\");\nvar TAG = __webpack_require__(\"2b4c\")('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n\n\n/***/ }),\n\n/***/ \"2621\":\n/***/ (function(module, exports) {\n\nexports.f = Object.getOwnPropertySymbols;\n\n\n/***/ }),\n\n/***/ \"27ee\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar classof = __webpack_require__(\"23c6\");\nvar ITERATOR = __webpack_require__(\"2b4c\")('iterator');\nvar Iterators = __webpack_require__(\"84f2\");\nmodule.exports = __webpack_require__(\"8378\").getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n\n\n/***/ }),\n\n/***/ \"28a5\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@split logic\n__webpack_require__(\"214f\")('split', 2, function (defined, SPLIT, $split) {\n  'use strict';\n  var isRegExp = __webpack_require__(\"aae3\");\n  var _split = $split;\n  var $push = [].push;\n  var $SPLIT = 'split';\n  var LENGTH = 'length';\n  var LAST_INDEX = 'lastIndex';\n  if (\n    'abbc'[$SPLIT](/(b)*/)[1] == 'c' ||\n    'test'[$SPLIT](/(?:)/, -1)[LENGTH] != 4 ||\n    'ab'[$SPLIT](/(?:ab)*/)[LENGTH] != 2 ||\n    '.'[$SPLIT](/(.?)(.?)/)[LENGTH] != 4 ||\n    '.'[$SPLIT](/()()/)[LENGTH] > 1 ||\n    ''[$SPLIT](/.?/)[LENGTH]\n  ) {\n    var NPCG = /()??/.exec('')[1] === undefined; // nonparticipating capturing group\n    // based on es5-shim implementation, need to rework it\n    $split = function (separator, limit) {\n      var string = String(this);\n      if (separator === undefined && limit === 0) return [];\n      // If `separator` is not a regex, use native split\n      if (!isRegExp(separator)) return _split.call(string, separator, limit);\n      var output = [];\n      var flags = (separator.ignoreCase ? 'i' : '') +\n                  (separator.multiline ? 'm' : '') +\n                  (separator.unicode ? 'u' : '') +\n                  (separator.sticky ? 'y' : '');\n      var lastLastIndex = 0;\n      var splitLimit = limit === undefined ? 4294967295 : limit >>> 0;\n      // Make `global` and avoid `lastIndex` issues by working with a copy\n      var separatorCopy = new RegExp(separator.source, flags + 'g');\n      var separator2, match, lastIndex, lastLength, i;\n      // Doesn't need flags gy, but they don't hurt\n      if (!NPCG) separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);\n      while (match = separatorCopy.exec(string)) {\n        // `separatorCopy.lastIndex` is not reliable cross-browser\n        lastIndex = match.index + match[0][LENGTH];\n        if (lastIndex > lastLastIndex) {\n          output.push(string.slice(lastLastIndex, match.index));\n          // Fix browsers whose `exec` methods don't consistently return `undefined` for NPCG\n          // eslint-disable-next-line no-loop-func\n          if (!NPCG && match[LENGTH] > 1) match[0].replace(separator2, function () {\n            for (i = 1; i < arguments[LENGTH] - 2; i++) if (arguments[i] === undefined) match[i] = undefined;\n          });\n          if (match[LENGTH] > 1 && match.index < string[LENGTH]) $push.apply(output, match.slice(1));\n          lastLength = match[0][LENGTH];\n          lastLastIndex = lastIndex;\n          if (output[LENGTH] >= splitLimit) break;\n        }\n        if (separatorCopy[LAST_INDEX] === match.index) separatorCopy[LAST_INDEX]++; // Avoid an infinite loop\n      }\n      if (lastLastIndex === string[LENGTH]) {\n        if (lastLength || !separatorCopy.test('')) output.push('');\n      } else output.push(string.slice(lastLastIndex));\n      return output[LENGTH] > splitLimit ? output.slice(0, splitLimit) : output;\n    };\n  // Chakra, V8\n  } else if ('0'[$SPLIT](undefined, 0)[LENGTH]) {\n    $split = function (separator, limit) {\n      return separator === undefined && limit === 0 ? [] : _split.call(this, separator, limit);\n    };\n  }\n  // 21.1.3.17 String.prototype.split(separator, limit)\n  return [function split(separator, limit) {\n    var O = defined(this);\n    var fn = separator == undefined ? undefined : separator[SPLIT];\n    return fn !== undefined ? fn.call(separator, O, limit) : $split.call(String(O), separator, limit);\n  }, $split];\n});\n\n\n/***/ }),\n\n/***/ \"2aba\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar hide = __webpack_require__(\"32e9\");\nvar has = __webpack_require__(\"69a8\");\nvar SRC = __webpack_require__(\"ca5a\")('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\n__webpack_require__(\"8378\").inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n\n\n/***/ }),\n\n/***/ \"2aeb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = __webpack_require__(\"cb7c\");\nvar dPs = __webpack_require__(\"1495\");\nvar enumBugKeys = __webpack_require__(\"e11e\");\nvar IE_PROTO = __webpack_require__(\"613b\")('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = __webpack_require__(\"230e\")('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  __webpack_require__(\"fab2\").appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n\n\n/***/ }),\n\n/***/ \"2b4c\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar store = __webpack_require__(\"5537\")('wks');\nvar uid = __webpack_require__(\"ca5a\");\nvar Symbol = __webpack_require__(\"7726\").Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n\n\n/***/ }),\n\n/***/ \"2d00\":\n/***/ (function(module, exports) {\n\nmodule.exports = false;\n\n\n/***/ }),\n\n/***/ \"2d95\":\n/***/ (function(module, exports) {\n\nvar toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n\n\n/***/ }),\n\n/***/ \"2e08\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = __webpack_require__(\"9def\");\nvar repeat = __webpack_require__(\"9744\");\nvar defined = __webpack_require__(\"be13\");\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n\n\n/***/ }),\n\n/***/ \"2f21\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar fails = __webpack_require__(\"79e5\");\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n\n\n/***/ }),\n\n/***/ \"2fdb\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// 21.1.3.7 String.prototype.includes(searchString, position = 0)\n\nvar $export = __webpack_require__(\"5ca1\");\nvar context = __webpack_require__(\"d2c8\");\nvar INCLUDES = 'includes';\n\n$export($export.P + $export.F * __webpack_require__(\"5147\")(INCLUDES), 'String', {\n  includes: function includes(searchString /* , position = 0 */) {\n    return !!~context(this, searchString, INCLUDES)\n      .indexOf(searchString, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"31f4\":\n/***/ (function(module, exports) {\n\n// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n\n\n/***/ }),\n\n/***/ \"32e9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"86cc\");\nvar createDesc = __webpack_require__(\"4630\");\nmodule.exports = __webpack_require__(\"9e1e\") ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n\n\n/***/ }),\n\n/***/ \"33a4\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// check on default Array iterator\nvar Iterators = __webpack_require__(\"84f2\");\nvar ITERATOR = __webpack_require__(\"2b4c\")('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n\n\n/***/ }),\n\n/***/ \"37e7\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M25.468 6.947a1.004 1.004 0 0 0-1.03.057L18 11.384V7.831a1.001 1.001 0 0 0-1.562-.827l-12 8.164a1 1 0 0 0 0 1.654l12 8.168A.999.999 0 0 0 18 24.164v-3.556l6.438 4.382A.999.999 0 0 0 26 24.164V7.831c0-.371-.205-.71-.532-.884z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"3846\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 21.2.5.3 get RegExp.prototype.flags()\nif (__webpack_require__(\"9e1e\") && /./g.flags != 'g') __webpack_require__(\"86cc\").f(RegExp.prototype, 'flags', {\n  configurable: true,\n  get: __webpack_require__(\"0bfb\")\n});\n\n\n/***/ }),\n\n/***/ \"386b\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"5ca1\");\nvar fails = __webpack_require__(\"79e5\");\nvar defined = __webpack_require__(\"be13\");\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n\n\n/***/ }),\n\n/***/ \"38fd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = __webpack_require__(\"69a8\");\nvar toObject = __webpack_require__(\"4bf8\");\nvar IE_PROTO = __webpack_require__(\"613b\")('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n\n\n/***/ }),\n\n/***/ \"41a0\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar create = __webpack_require__(\"2aeb\");\nvar descriptor = __webpack_require__(\"4630\");\nvar setToStringTag = __webpack_require__(\"7f20\");\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\n__webpack_require__(\"32e9\")(IteratorPrototype, __webpack_require__(\"2b4c\")('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n\n\n/***/ }),\n\n/***/ \"456d\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(\"4bf8\");\nvar $keys = __webpack_require__(\"0d58\");\n\n__webpack_require__(\"5eda\")('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n/***/ }),\n\n/***/ \"4588\":\n/***/ (function(module, exports) {\n\n// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n\n\n/***/ }),\n\n/***/ \"4630\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n\n\n/***/ }),\n\n/***/ \"4713\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M26.667 5.333H5.334h-.001a2.667 2.667 0 0 0-2.666 2.666V24.001a2.667 2.667 0 0 0 2.666 2.666h21.335a2.667 2.667 0 0 0 2.666-2.666V8v-.001a2.667 2.667 0 0 0-2.666-2.666h-.001zM5.333 16h5.333v2.667H5.333V16zm13.334 8H5.334v-2.667h13.333V24zm8 0h-5.333v-2.667h5.333V24zm0-5.333H13.334V16h13.333v2.667z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"475a\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M.622 18.334h19.54v7.55l11.052-9.412-11.052-9.413v7.549H.622v3.725z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"48d3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(__webpack_require__(\"b349\"));\nvar modifiers_1 = __webpack_require__(\"66a1\");\nexports.modifiers = modifiers_1.modifiers;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSwyQkFBc0I7QUFDdEIseUNBQXdDO0FBQS9CLGdDQUFBLFNBQVMsQ0FBQSJ9\n\n/***/ }),\n\n/***/ \"4917\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@match logic\n__webpack_require__(\"214f\")('match', 1, function (defined, MATCH, $match) {\n  // 21.1.3.11 String.prototype.match(regexp)\n  return [function match(regexp) {\n    'use strict';\n    var O = defined(this);\n    var fn = regexp == undefined ? undefined : regexp[MATCH];\n    return fn !== undefined ? fn.call(regexp, O) : new RegExp(regexp)[MATCH](String(O));\n  }, $match];\n});\n\n\n/***/ }),\n\n/***/ \"499e\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/listToStyles.js\n/**\n * Translates the list format produced by css-loader into something\n * easier to manipulate.\n */\nfunction listToStyles (parentId, list) {\n  var styles = []\n  var newStyles = {}\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i]\n    var id = item[0]\n    var css = item[1]\n    var media = item[2]\n    var sourceMap = item[3]\n    var part = {\n      id: parentId + ':' + i,\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    }\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = { id: id, parts: [part] })\n    } else {\n      newStyles[id].parts.push(part)\n    }\n  }\n  return styles\n}\n\n// CONCATENATED MODULE: ./node_modules/vue-style-loader/lib/addStylesClient.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return addStylesClient; });\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n  Modified by Evan You @yyx990803\n*/\n\n\n\nvar hasDocument = typeof document !== 'undefined'\n\nif (typeof DEBUG !== 'undefined' && DEBUG) {\n  if (!hasDocument) {\n    throw new Error(\n    'vue-style-loader cannot be used in a non-browser environment. ' +\n    \"Use { target: 'node' } in your Webpack config to indicate a server-rendering environment.\"\n  ) }\n}\n\n/*\ntype StyleObject = {\n  id: number;\n  parts: Array<StyleObjectPart>\n}\n\ntype StyleObjectPart = {\n  css: string;\n  media: string;\n  sourceMap: ?string\n}\n*/\n\nvar stylesInDom = {/*\n  [id: number]: {\n    id: number,\n    refs: number,\n    parts: Array<(obj?: StyleObjectPart) => void>\n  }\n*/}\n\nvar head = hasDocument && (document.head || document.getElementsByTagName('head')[0])\nvar singletonElement = null\nvar singletonCounter = 0\nvar isProduction = false\nvar noop = function () {}\nvar options = null\nvar ssrIdKey = 'data-vue-ssr-id'\n\n// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n// tags it will allow on a page\nvar isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase())\n\nfunction addStylesClient (parentId, list, _isProduction, _options) {\n  isProduction = _isProduction\n\n  options = _options || {}\n\n  var styles = listToStyles(parentId, list)\n  addStylesToDom(styles)\n\n  return function update (newList) {\n    var mayRemove = []\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i]\n      var domStyle = stylesInDom[item.id]\n      domStyle.refs--\n      mayRemove.push(domStyle)\n    }\n    if (newList) {\n      styles = listToStyles(parentId, newList)\n      addStylesToDom(styles)\n    } else {\n      styles = []\n    }\n    for (var i = 0; i < mayRemove.length; i++) {\n      var domStyle = mayRemove[i]\n      if (domStyle.refs === 0) {\n        for (var j = 0; j < domStyle.parts.length; j++) {\n          domStyle.parts[j]()\n        }\n        delete stylesInDom[domStyle.id]\n      }\n    }\n  }\n}\n\nfunction addStylesToDom (styles /* Array<StyleObject> */) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i]\n    var domStyle = stylesInDom[item.id]\n    if (domStyle) {\n      domStyle.refs++\n      for (var j = 0; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j])\n      }\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j]))\n      }\n      if (domStyle.parts.length > item.parts.length) {\n        domStyle.parts.length = item.parts.length\n      }\n    } else {\n      var parts = []\n      for (var j = 0; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j]))\n      }\n      stylesInDom[item.id] = { id: item.id, refs: 1, parts: parts }\n    }\n  }\n}\n\nfunction createStyleElement () {\n  var styleElement = document.createElement('style')\n  styleElement.type = 'text/css'\n  head.appendChild(styleElement)\n  return styleElement\n}\n\nfunction addStyle (obj /* StyleObjectPart */) {\n  var update, remove\n  var styleElement = document.querySelector('style[' + ssrIdKey + '~=\"' + obj.id + '\"]')\n\n  if (styleElement) {\n    if (isProduction) {\n      // has SSR styles and in production mode.\n      // simply do nothing.\n      return noop\n    } else {\n      // has SSR styles but in dev mode.\n      // for some reason Chrome can't handle source map in server-rendered\n      // style tags - source maps in <style> only works if the style tag is\n      // created and inserted dynamically. So we remove the server rendered\n      // styles and inject new ones.\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  if (isOldIE) {\n    // use singleton mode for IE9.\n    var styleIndex = singletonCounter++\n    styleElement = singletonElement || (singletonElement = createStyleElement())\n    update = applyToSingletonTag.bind(null, styleElement, styleIndex, false)\n    remove = applyToSingletonTag.bind(null, styleElement, styleIndex, true)\n  } else {\n    // use multi-style-tag mode in all other cases\n    styleElement = createStyleElement()\n    update = applyToTag.bind(null, styleElement)\n    remove = function () {\n      styleElement.parentNode.removeChild(styleElement)\n    }\n  }\n\n  update(obj)\n\n  return function updateStyle (newObj /* StyleObjectPart */) {\n    if (newObj) {\n      if (newObj.css === obj.css &&\n          newObj.media === obj.media &&\n          newObj.sourceMap === obj.sourceMap) {\n        return\n      }\n      update(obj = newObj)\n    } else {\n      remove()\n    }\n  }\n}\n\nvar replaceText = (function () {\n  var textStore = []\n\n  return function (index, replacement) {\n    textStore[index] = replacement\n    return textStore.filter(Boolean).join('\\n')\n  }\n})()\n\nfunction applyToSingletonTag (styleElement, index, remove, obj) {\n  var css = remove ? '' : obj.css\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = replaceText(index, css)\n  } else {\n    var cssNode = document.createTextNode(css)\n    var childNodes = styleElement.childNodes\n    if (childNodes[index]) styleElement.removeChild(childNodes[index])\n    if (childNodes.length) {\n      styleElement.insertBefore(cssNode, childNodes[index])\n    } else {\n      styleElement.appendChild(cssNode)\n    }\n  }\n}\n\nfunction applyToTag (styleElement, obj) {\n  var css = obj.css\n  var media = obj.media\n  var sourceMap = obj.sourceMap\n\n  if (media) {\n    styleElement.setAttribute('media', media)\n  }\n  if (options.ssrId) {\n    styleElement.setAttribute(ssrIdKey, obj.id)\n  }\n\n  if (sourceMap) {\n    // https://developer.chrome.com/devtools/docs/javascript-debugging\n    // this makes source maps inside style tags work properly in Chrome\n    css += '\\n/*# sourceURL=' + sourceMap.sources[0] + ' */'\n    // http://stackoverflow.com/a/26603875\n    css += '\\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + ' */'\n  }\n\n  if (styleElement.styleSheet) {\n    styleElement.styleSheet.cssText = css\n  } else {\n    while (styleElement.firstChild) {\n      styleElement.removeChild(styleElement.firstChild)\n    }\n    styleElement.appendChild(document.createTextNode(css))\n  }\n}\n\n\n/***/ }),\n\n/***/ \"4a59\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ctx = __webpack_require__(\"9b43\");\nvar call = __webpack_require__(\"1fa8\");\nvar isArrayIter = __webpack_require__(\"33a4\");\nvar anObject = __webpack_require__(\"cb7c\");\nvar toLength = __webpack_require__(\"9def\");\nvar getIterFn = __webpack_require__(\"27ee\");\nvar BREAK = {};\nvar RETURN = {};\nvar exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {\n  var iterFn = ITERATOR ? function () { return iterable; } : getIterFn(iterable);\n  var f = ctx(fn, that, entries ? 2 : 1);\n  var index = 0;\n  var length, step, iterator, result;\n  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');\n  // fast case for arrays with default iterator\n  if (isArrayIter(iterFn)) for (length = toLength(iterable.length); length > index; index++) {\n    result = entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);\n    if (result === BREAK || result === RETURN) return result;\n  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {\n    result = call(iterator, f, step.value, entries);\n    if (result === BREAK || result === RETURN) return result;\n  }\n};\nexports.BREAK = BREAK;\nexports.RETURN = RETURN;\n\n\n/***/ }),\n\n/***/ \"4b41\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 28 32\"}},[_c('path',{attrs:{\"d\":\"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8zM20.576 16q0 1.344-.768 2.528t-2.016 1.664q-.16.096-.448.096-.448 0-.8-.32t-.32-.832q0-.384.192-.64t.544-.448.608-.384.512-.64.192-1.024-.192-1.024-.512-.64-.608-.384-.544-.448-.192-.64q0-.48.32-.832t.8-.32q.288 0 .448.096 1.248.48 2.016 1.664T20.576 16zm4.576 0q0 2.72-1.536 5.056t-4 3.36q-.256.096-.448.096-.48 0-.832-.352t-.32-.8q0-.704.672-1.056 1.024-.512 1.376-.8 1.312-.96 2.048-2.4T22.848 16t-.736-3.104-2.048-2.4q-.352-.288-1.376-.8-.672-.352-.672-1.056 0-.448.32-.8t.8-.352q.224 0 .48.096 2.496 1.056 4 3.36T25.152 16zm4.576 0q0 4.096-2.272 7.552t-6.048 5.056q-.224.096-.448.096-.48 0-.832-.352t-.32-.8q0-.64.704-1.056l.384-.192q.256-.128.416-.192.8-.448 1.44-.896 2.208-1.632 3.456-4.064T27.424 16t-1.216-5.152-3.456-4.064q-.64-.448-1.44-.896-.128-.096-.416-.192t-.384-.192q-.704-.416-.704-1.056 0-.448.32-.8t.832-.352q.224 0 .448.096 3.776 1.632 6.048 5.056T29.728 16z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"4bf8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.13 ToObject(argument)\nvar defined = __webpack_require__(\"be13\");\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"4d26\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!\n  Copyright (c) 2017 Jed Watson.\n  Licensed under the MIT License (MIT), see\n  http://jedwatson.github.io/classnames\n*/\n/* global define */\n\n(function () {\n\t'use strict';\n\n\tvar hasOwn = {}.hasOwnProperty;\n\n\tfunction classNames () {\n\t\tvar classes = [];\n\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\tvar arg = arguments[i];\n\t\t\tif (!arg) continue;\n\n\t\t\tvar argType = typeof arg;\n\n\t\t\tif (argType === 'string' || argType === 'number') {\n\t\t\t\tclasses.push(arg);\n\t\t\t} else if (Array.isArray(arg) && arg.length) {\n\t\t\t\tvar inner = classNames.apply(null, arg);\n\t\t\t\tif (inner) {\n\t\t\t\t\tclasses.push(inner);\n\t\t\t\t}\n\t\t\t} else if (argType === 'object') {\n\t\t\t\tfor (var key in arg) {\n\t\t\t\t\tif (hasOwn.call(arg, key) && arg[key]) {\n\t\t\t\t\t\tclasses.push(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn classes.join(' ');\n\t}\n\n\tif ( true && module.exports) {\n\t\tclassNames.default = classNames;\n\t\tmodule.exports = classNames;\n\t} else if (true) {\n\t\t// register as 'classnames', consistent with npm package name\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n\t\t\treturn classNames;\n\t\t}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\t} else {}\n}());\n\n\n/***/ }),\n\n/***/ \"5147\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar MATCH = __webpack_require__(\"2b4c\")('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n\n\n/***/ }),\n\n/***/ \"52a7\":\n/***/ (function(module, exports) {\n\nexports.f = {}.propertyIsEnumerable;\n\n\n/***/ }),\n\n/***/ \"52f0\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar map = {\n\t\"./loading.svg\": \"885d\",\n\t\"./loop-all.svg\": \"f866\",\n\t\"./loop-none.svg\": \"c3ab\",\n\t\"./loop-one.svg\": \"5527\",\n\t\"./lrc.svg\": \"4713\",\n\t\"./menu.svg\": \"906b\",\n\t\"./order-list.svg\": \"475a\",\n\t\"./order-random.svg\": \"7a1a\",\n\t\"./pause.svg\": \"daf8\",\n\t\"./play.svg\": \"84d8\",\n\t\"./right.svg\": \"bf5c\",\n\t\"./skip.svg\": \"37e7\",\n\t\"./volume-down.svg\": \"bdba\",\n\t\"./volume-off.svg\": \"adec\",\n\t\"./volume-up.svg\": \"4b41\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"52f0\";\n\n/***/ }),\n\n/***/ \"551c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar LIBRARY = __webpack_require__(\"2d00\");\nvar global = __webpack_require__(\"7726\");\nvar ctx = __webpack_require__(\"9b43\");\nvar classof = __webpack_require__(\"23c6\");\nvar $export = __webpack_require__(\"5ca1\");\nvar isObject = __webpack_require__(\"d3f4\");\nvar aFunction = __webpack_require__(\"d8e8\");\nvar anInstance = __webpack_require__(\"f605\");\nvar forOf = __webpack_require__(\"4a59\");\nvar speciesConstructor = __webpack_require__(\"ebd6\");\nvar task = __webpack_require__(\"1991\").set;\nvar microtask = __webpack_require__(\"8079\")();\nvar newPromiseCapabilityModule = __webpack_require__(\"a5b8\");\nvar perform = __webpack_require__(\"9c80\");\nvar userAgent = __webpack_require__(\"a25f\");\nvar promiseResolve = __webpack_require__(\"bcaa\");\nvar PROMISE = 'Promise';\nvar TypeError = global.TypeError;\nvar process = global.process;\nvar versions = process && process.versions;\nvar v8 = versions && versions.v8 || '';\nvar $Promise = global[PROMISE];\nvar isNode = classof(process) == 'process';\nvar empty = function () { /* empty */ };\nvar Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper;\nvar newPromiseCapability = newGenericPromiseCapability = newPromiseCapabilityModule.f;\n\nvar USE_NATIVE = !!function () {\n  try {\n    // correct subclassing with @@species support\n    var promise = $Promise.resolve(1);\n    var FakePromise = (promise.constructor = {})[__webpack_require__(\"2b4c\")('species')] = function (exec) {\n      exec(empty, empty);\n    };\n    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test\n    return (isNode || typeof PromiseRejectionEvent == 'function')\n      && promise.then(empty) instanceof FakePromise\n      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables\n      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565\n      // we can't detect it synchronously, so just check versions\n      && v8.indexOf('6.6') !== 0\n      && userAgent.indexOf('Chrome/66') === -1;\n  } catch (e) { /* empty */ }\n}();\n\n// helpers\nvar isThenable = function (it) {\n  var then;\n  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;\n};\nvar notify = function (promise, isReject) {\n  if (promise._n) return;\n  promise._n = true;\n  var chain = promise._c;\n  microtask(function () {\n    var value = promise._v;\n    var ok = promise._s == 1;\n    var i = 0;\n    var run = function (reaction) {\n      var handler = ok ? reaction.ok : reaction.fail;\n      var resolve = reaction.resolve;\n      var reject = reaction.reject;\n      var domain = reaction.domain;\n      var result, then, exited;\n      try {\n        if (handler) {\n          if (!ok) {\n            if (promise._h == 2) onHandleUnhandled(promise);\n            promise._h = 1;\n          }\n          if (handler === true) result = value;\n          else {\n            if (domain) domain.enter();\n            result = handler(value); // may throw\n            if (domain) {\n              domain.exit();\n              exited = true;\n            }\n          }\n          if (result === reaction.promise) {\n            reject(TypeError('Promise-chain cycle'));\n          } else if (then = isThenable(result)) {\n            then.call(result, resolve, reject);\n          } else resolve(result);\n        } else reject(value);\n      } catch (e) {\n        if (domain && !exited) domain.exit();\n        reject(e);\n      }\n    };\n    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach\n    promise._c = [];\n    promise._n = false;\n    if (isReject && !promise._h) onUnhandled(promise);\n  });\n};\nvar onUnhandled = function (promise) {\n  task.call(global, function () {\n    var value = promise._v;\n    var unhandled = isUnhandled(promise);\n    var result, handler, console;\n    if (unhandled) {\n      result = perform(function () {\n        if (isNode) {\n          process.emit('unhandledRejection', value, promise);\n        } else if (handler = global.onunhandledrejection) {\n          handler({ promise: promise, reason: value });\n        } else if ((console = global.console) && console.error) {\n          console.error('Unhandled promise rejection', value);\n        }\n      });\n      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should\n      promise._h = isNode || isUnhandled(promise) ? 2 : 1;\n    } promise._a = undefined;\n    if (unhandled && result.e) throw result.v;\n  });\n};\nvar isUnhandled = function (promise) {\n  return promise._h !== 1 && (promise._a || promise._c).length === 0;\n};\nvar onHandleUnhandled = function (promise) {\n  task.call(global, function () {\n    var handler;\n    if (isNode) {\n      process.emit('rejectionHandled', promise);\n    } else if (handler = global.onrejectionhandled) {\n      handler({ promise: promise, reason: promise._v });\n    }\n  });\n};\nvar $reject = function (value) {\n  var promise = this;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  promise._v = value;\n  promise._s = 2;\n  if (!promise._a) promise._a = promise._c.slice();\n  notify(promise, true);\n};\nvar $resolve = function (value) {\n  var promise = this;\n  var then;\n  if (promise._d) return;\n  promise._d = true;\n  promise = promise._w || promise; // unwrap\n  try {\n    if (promise === value) throw TypeError(\"Promise can't be resolved itself\");\n    if (then = isThenable(value)) {\n      microtask(function () {\n        var wrapper = { _w: promise, _d: false }; // wrap\n        try {\n          then.call(value, ctx($resolve, wrapper, 1), ctx($reject, wrapper, 1));\n        } catch (e) {\n          $reject.call(wrapper, e);\n        }\n      });\n    } else {\n      promise._v = value;\n      promise._s = 1;\n      notify(promise, false);\n    }\n  } catch (e) {\n    $reject.call({ _w: promise, _d: false }, e); // wrap\n  }\n};\n\n// constructor polyfill\nif (!USE_NATIVE) {\n  // 25.4.3.1 Promise(executor)\n  $Promise = function Promise(executor) {\n    anInstance(this, $Promise, PROMISE, '_h');\n    aFunction(executor);\n    Internal.call(this);\n    try {\n      executor(ctx($resolve, this, 1), ctx($reject, this, 1));\n    } catch (err) {\n      $reject.call(this, err);\n    }\n  };\n  // eslint-disable-next-line no-unused-vars\n  Internal = function Promise(executor) {\n    this._c = [];             // <- awaiting reactions\n    this._a = undefined;      // <- checked in isUnhandled reactions\n    this._s = 0;              // <- state\n    this._d = false;          // <- done\n    this._v = undefined;      // <- value\n    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled\n    this._n = false;          // <- notify\n  };\n  Internal.prototype = __webpack_require__(\"dcbc\")($Promise.prototype, {\n    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)\n    then: function then(onFulfilled, onRejected) {\n      var reaction = newPromiseCapability(speciesConstructor(this, $Promise));\n      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;\n      reaction.fail = typeof onRejected == 'function' && onRejected;\n      reaction.domain = isNode ? process.domain : undefined;\n      this._c.push(reaction);\n      if (this._a) this._a.push(reaction);\n      if (this._s) notify(this, false);\n      return reaction.promise;\n    },\n    // 25.4.5.1 Promise.prototype.catch(onRejected)\n    'catch': function (onRejected) {\n      return this.then(undefined, onRejected);\n    }\n  });\n  OwnPromiseCapability = function () {\n    var promise = new Internal();\n    this.promise = promise;\n    this.resolve = ctx($resolve, promise, 1);\n    this.reject = ctx($reject, promise, 1);\n  };\n  newPromiseCapabilityModule.f = newPromiseCapability = function (C) {\n    return C === $Promise || C === Wrapper\n      ? new OwnPromiseCapability(C)\n      : newGenericPromiseCapability(C);\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Promise: $Promise });\n__webpack_require__(\"7f20\")($Promise, PROMISE);\n__webpack_require__(\"7a56\")(PROMISE);\nWrapper = __webpack_require__(\"8378\")[PROMISE];\n\n// statics\n$export($export.S + $export.F * !USE_NATIVE, PROMISE, {\n  // 25.4.4.5 Promise.reject(r)\n  reject: function reject(r) {\n    var capability = newPromiseCapability(this);\n    var $$reject = capability.reject;\n    $$reject(r);\n    return capability.promise;\n  }\n});\n$export($export.S + $export.F * (LIBRARY || !USE_NATIVE), PROMISE, {\n  // 25.4.4.6 Promise.resolve(x)\n  resolve: function resolve(x) {\n    return promiseResolve(LIBRARY && this === Wrapper ? $Promise : this, x);\n  }\n});\n$export($export.S + $export.F * !(USE_NATIVE && __webpack_require__(\"5cc5\")(function (iter) {\n  $Promise.all(iter)['catch'](empty);\n})), PROMISE, {\n  // 25.4.4.1 Promise.all(iterable)\n  all: function all(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var resolve = capability.resolve;\n    var reject = capability.reject;\n    var result = perform(function () {\n      var values = [];\n      var index = 0;\n      var remaining = 1;\n      forOf(iterable, false, function (promise) {\n        var $index = index++;\n        var alreadyCalled = false;\n        values.push(undefined);\n        remaining++;\n        C.resolve(promise).then(function (value) {\n          if (alreadyCalled) return;\n          alreadyCalled = true;\n          values[$index] = value;\n          --remaining || resolve(values);\n        }, reject);\n      });\n      --remaining || resolve(values);\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  },\n  // 25.4.4.4 Promise.race(iterable)\n  race: function race(iterable) {\n    var C = this;\n    var capability = newPromiseCapability(C);\n    var reject = capability.reject;\n    var result = perform(function () {\n      forOf(iterable, false, function (promise) {\n        C.resolve(promise).then(capability.resolve, reject);\n      });\n    });\n    if (result.e) reject(result.v);\n    return capability.promise;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"5527\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 33 32\"}},[_c('path',{attrs:{\"d\":\"M9.333 9.333h13.333v4L27.999 8l-5.333-5.333v4h-16v8h2.667V9.334zm13.334 13.334H9.334v-4L4.001 24l5.333 5.333v-4h16v-8h-2.667v5.333zM17.333 20v-8H16l-2.667 1.333v1.333h2v5.333h2z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"5537\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar core = __webpack_require__(\"8378\");\nvar global = __webpack_require__(\"7726\");\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: __webpack_require__(\"2d00\") ? 'pure' : 'global',\n  copyright: '© 2018 Denis Pushkarev (zloirock.ru)'\n});\n\n\n/***/ }),\n\n/***/ \"55dd\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar $export = __webpack_require__(\"5ca1\");\nvar aFunction = __webpack_require__(\"d8e8\");\nvar toObject = __webpack_require__(\"4bf8\");\nvar fails = __webpack_require__(\"79e5\");\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !__webpack_require__(\"2f21\")($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n\n\n/***/ }),\n\n/***/ \"5ca1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar core = __webpack_require__(\"8378\");\nvar hide = __webpack_require__(\"32e9\");\nvar redefine = __webpack_require__(\"2aba\");\nvar ctx = __webpack_require__(\"9b43\");\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n\n\n/***/ }),\n\n/***/ \"5cc5\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar ITERATOR = __webpack_require__(\"2b4c\")('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n\n\n/***/ }),\n\n/***/ \"5dbc\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nvar setPrototypeOf = __webpack_require__(\"8b97\").set;\nmodule.exports = function (that, target, C) {\n  var S = target.constructor;\n  var P;\n  if (S !== C && typeof S == 'function' && (P = S.prototype) !== C.prototype && isObject(P) && setPrototypeOf) {\n    setPrototypeOf(that, P);\n  } return that;\n};\n\n\n/***/ }),\n\n/***/ \"5eda\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(\"5ca1\");\nvar core = __webpack_require__(\"8378\");\nvar fails = __webpack_require__(\"79e5\");\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n/***/ }),\n\n/***/ \"610a\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"ab57\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = __webpack_require__(\"499e\").default\nvar update = add(\"4573c8b0\", content, true, {\"sourceMap\":false,\"shadowMode\":false});\n\n/***/ }),\n\n/***/ \"613b\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar shared = __webpack_require__(\"5537\")('keys');\nvar uid = __webpack_require__(\"ca5a\");\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n\n\n/***/ }),\n\n/***/ \"626a\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = __webpack_require__(\"2d95\");\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n\n\n/***/ }),\n\n/***/ \"65d9\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n/**\n  * vue-class-component v6.3.2\n  * (c) 2015-present Evan You\n  * @license MIT\n  */\n\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\n\nvar Vue = _interopDefault(__webpack_require__(\"8bbf\"));\n\nvar reflectionIsSupported = typeof Reflect !== 'undefined' && Reflect.defineMetadata;\nfunction copyReflectionMetadata(to, from) {\n    forwardMetadata(to, from);\n    Object.getOwnPropertyNames(from.prototype).forEach(function (key) {\n        forwardMetadata(to.prototype, from.prototype, key);\n    });\n    Object.getOwnPropertyNames(from).forEach(function (key) {\n        forwardMetadata(to, from, key);\n    });\n}\nfunction forwardMetadata(to, from, propertyKey) {\n    var metaKeys = propertyKey\n        ? Reflect.getOwnMetadataKeys(from, propertyKey)\n        : Reflect.getOwnMetadataKeys(from);\n    metaKeys.forEach(function (metaKey) {\n        var metadata = propertyKey\n            ? Reflect.getOwnMetadata(metaKey, from, propertyKey)\n            : Reflect.getOwnMetadata(metaKey, from);\n        if (propertyKey) {\n            Reflect.defineMetadata(metaKey, metadata, to, propertyKey);\n        }\n        else {\n            Reflect.defineMetadata(metaKey, metadata, to);\n        }\n    });\n}\n\nvar fakeArray = { __proto__: [] };\nvar hasProto = fakeArray instanceof Array;\nfunction createDecorator(factory) {\n    return function (target, key, index) {\n        var Ctor = typeof target === 'function'\n            ? target\n            : target.constructor;\n        if (!Ctor.__decorators__) {\n            Ctor.__decorators__ = [];\n        }\n        if (typeof index !== 'number') {\n            index = undefined;\n        }\n        Ctor.__decorators__.push(function (options) { return factory(options, key, index); });\n    };\n}\nfunction mixins() {\n    var Ctors = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        Ctors[_i] = arguments[_i];\n    }\n    return Vue.extend({ mixins: Ctors });\n}\nfunction isPrimitive(value) {\n    var type = typeof value;\n    return value == null || (type !== 'object' && type !== 'function');\n}\nfunction warn(message) {\n    if (typeof console !== 'undefined') {\n        console.warn('[vue-class-component] ' + message);\n    }\n}\n\nfunction collectDataFromConstructor(vm, Component) {\n    // override _init to prevent to init as Vue instance\n    var originalInit = Component.prototype._init;\n    Component.prototype._init = function () {\n        var _this = this;\n        // proxy to actual vm\n        var keys = Object.getOwnPropertyNames(vm);\n        // 2.2.0 compat (props are no longer exposed as self properties)\n        if (vm.$options.props) {\n            for (var key in vm.$options.props) {\n                if (!vm.hasOwnProperty(key)) {\n                    keys.push(key);\n                }\n            }\n        }\n        keys.forEach(function (key) {\n            if (key.charAt(0) !== '_') {\n                Object.defineProperty(_this, key, {\n                    get: function () { return vm[key]; },\n                    set: function (value) { vm[key] = value; },\n                    configurable: true\n                });\n            }\n        });\n    };\n    // should be acquired class property values\n    var data = new Component();\n    // restore original _init to avoid memory leak (#209)\n    Component.prototype._init = originalInit;\n    // create plain data object\n    var plainData = {};\n    Object.keys(data).forEach(function (key) {\n        if (data[key] !== undefined) {\n            plainData[key] = data[key];\n        }\n    });\n    if (false) {}\n    return plainData;\n}\n\nvar $internalHooks = [\n    'data',\n    'beforeCreate',\n    'created',\n    'beforeMount',\n    'mounted',\n    'beforeDestroy',\n    'destroyed',\n    'beforeUpdate',\n    'updated',\n    'activated',\n    'deactivated',\n    'render',\n    'errorCaptured' // 2.5\n];\nfunction componentFactory(Component, options) {\n    if (options === void 0) { options = {}; }\n    options.name = options.name || Component._componentTag || Component.name;\n    // prototype props.\n    var proto = Component.prototype;\n    Object.getOwnPropertyNames(proto).forEach(function (key) {\n        if (key === 'constructor') {\n            return;\n        }\n        // hooks\n        if ($internalHooks.indexOf(key) > -1) {\n            options[key] = proto[key];\n            return;\n        }\n        var descriptor = Object.getOwnPropertyDescriptor(proto, key);\n        if (descriptor.value !== void 0) {\n            // methods\n            if (typeof descriptor.value === 'function') {\n                (options.methods || (options.methods = {}))[key] = descriptor.value;\n            }\n            else {\n                // typescript decorated data\n                (options.mixins || (options.mixins = [])).push({\n                    data: function () {\n                        var _a;\n                        return _a = {}, _a[key] = descriptor.value, _a;\n                    }\n                });\n            }\n        }\n        else if (descriptor.get || descriptor.set) {\n            // computed properties\n            (options.computed || (options.computed = {}))[key] = {\n                get: descriptor.get,\n                set: descriptor.set\n            };\n        }\n    });\n    (options.mixins || (options.mixins = [])).push({\n        data: function () {\n            return collectDataFromConstructor(this, Component);\n        }\n    });\n    // decorate options\n    var decorators = Component.__decorators__;\n    if (decorators) {\n        decorators.forEach(function (fn) { return fn(options); });\n        delete Component.__decorators__;\n    }\n    // find super\n    var superProto = Object.getPrototypeOf(Component.prototype);\n    var Super = superProto instanceof Vue\n        ? superProto.constructor\n        : Vue;\n    var Extended = Super.extend(options);\n    forwardStaticMembers(Extended, Component, Super);\n    if (reflectionIsSupported) {\n        copyReflectionMetadata(Extended, Component);\n    }\n    return Extended;\n}\nvar reservedPropertyNames = [\n    // Unique id\n    'cid',\n    // Super Vue constructor\n    'super',\n    // Component options that will be used by the component\n    'options',\n    'superOptions',\n    'extendOptions',\n    'sealedOptions',\n    // Private assets\n    'component',\n    'directive',\n    'filter'\n];\nfunction forwardStaticMembers(Extended, Original, Super) {\n    // We have to use getOwnPropertyNames since Babel registers methods as non-enumerable\n    Object.getOwnPropertyNames(Original).forEach(function (key) {\n        // `prototype` should not be overwritten\n        if (key === 'prototype') {\n            return;\n        }\n        // Some browsers does not allow reconfigure built-in properties\n        var extendedDescriptor = Object.getOwnPropertyDescriptor(Extended, key);\n        if (extendedDescriptor && !extendedDescriptor.configurable) {\n            return;\n        }\n        var descriptor = Object.getOwnPropertyDescriptor(Original, key);\n        // If the user agent does not support `__proto__` or its family (IE <= 10),\n        // the sub class properties may be inherited properties from the super class in TypeScript.\n        // We need to exclude such properties to prevent to overwrite\n        // the component options object which stored on the extended constructor (See #192).\n        // If the value is a referenced value (object or function),\n        // we can check equality of them and exclude it if they have the same reference.\n        // If it is a primitive value, it will be forwarded for safety.\n        if (!hasProto) {\n            // Only `cid` is explicitly exluded from property forwarding\n            // because we cannot detect whether it is a inherited property or not\n            // on the no `__proto__` environment even though the property is reserved.\n            if (key === 'cid') {\n                return;\n            }\n            var superDescriptor = Object.getOwnPropertyDescriptor(Super, key);\n            if (!isPrimitive(descriptor.value) &&\n                superDescriptor &&\n                superDescriptor.value === descriptor.value) {\n                return;\n            }\n        }\n        // Warn if the users manually declare reserved properties\n        if (false) {}\n        Object.defineProperty(Extended, key, descriptor);\n    });\n}\n\nfunction Component(options) {\n    if (typeof options === 'function') {\n        return componentFactory(options);\n    }\n    return function (Component) {\n        return componentFactory(Component, options);\n    };\n}\nComponent.registerHooks = function registerHooks(keys) {\n    $internalHooks.push.apply($internalHooks, keys);\n};\n\nexports.default = Component;\nexports.createDecorator = createDecorator;\nexports.mixins = mixins;\n\n\n/***/ }),\n\n/***/ \"66a1\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction handleEvent(event, filters, handler) {\n    for (var _i = 0, filters_1 = filters; _i < filters_1.length; _i++) {\n        var filter = filters_1[_i];\n        if (!filter(event)) {\n            return;\n        }\n    }\n    if (handler) {\n        handler(event);\n    }\n}\nvar keyCodes = {\n    esc: 27,\n    tab: 9,\n    enter: 13,\n    space: 32,\n    up: 38,\n    down: 40,\n    del: [8, 46],\n    left: 37,\n    right: 39\n};\nfunction createKeyFilter(keys) {\n    var codes = [];\n    for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n        var key = keys_1[_i];\n        if (typeof key === \"number\") {\n            codes.push(key);\n        }\n        else {\n            var code = keyCodes[key];\n            if (typeof code === \"number\") {\n                codes.push(code);\n            }\n            else {\n                codes.push.apply(codes, code);\n            }\n        }\n    }\n    switch (codes.length) {\n        case 0:\n            return function (_) { return false; };\n        case 1:\n            var code_1 = codes[0];\n            return function (e) { return e.keyCode === code_1; };\n        default:\n            return function (e) { return codes.indexOf(e.keyCode) >= 0; };\n    }\n}\nfunction defineChildModifier(target, currentFilters, name, filter, children) {\n    Object.defineProperty(target, name, {\n        get: function () {\n            // call this getter at most once.\n            // reuse created instance after next time.\n            var ret = createModifier(currentFilters.concat([filter]), children);\n            Object.defineProperty(target, name, {\n                value: ret,\n                enumerable: true\n            });\n            return ret;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction defineKeyCodeModifiers(target, filters, children) {\n    var _loop_1 = function (name_1) {\n        var keyName = name_1;\n        if (keyName === \"left\" || keyName === \"right\") {\n            return \"continue\";\n        }\n        var code = keyCodes[keyName];\n        if (typeof code === \"number\") {\n            defineChildModifier(target, filters, keyName, function (e) { return e.keyCode === code; }, children);\n        }\n        else {\n            var c1_1 = code[0], c2_1 = code[1];\n            defineChildModifier(target, filters, keyName, function (e) { return e.keyCode === c1_1 || e.keyCode === c2_1; }, children);\n        }\n    };\n    for (var name_1 in keyCodes) {\n        _loop_1(name_1);\n    }\n}\nfunction defineKeys(target, filters, children) {\n    Object.defineProperty(target, \"keys\", {\n        get: function () {\n            var _this = this;\n            var keysFunction = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var propName = \"keys:\" + args.toString();\n                var modifier = _this[propName];\n                if (modifier !== undefined) {\n                    return modifier;\n                }\n                var filter = createKeyFilter(args);\n                defineChildModifier(_this, filters, propName, filter, children);\n                return _this[propName];\n            };\n            Object.defineProperty(this, \"keys\", {\n                value: keysFunction,\n                enumerable: true\n            });\n            return keysFunction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction defineExact(target, filters, children) {\n    Object.defineProperty(target, \"exact\", {\n        get: function () {\n            var _this = this;\n            var exactFunction = function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i] = arguments[_i];\n                }\n                var propName = \"exact:\" + args.toString();\n                var modifier = _this[propName];\n                if (modifier !== undefined) {\n                    return modifier;\n                }\n                var expected = {\n                    ctrl: false,\n                    shift: false,\n                    alt: false,\n                    meta: false\n                };\n                args.forEach(function (arg) { return (expected[arg] = true); });\n                var filter = function (e) {\n                    return !!e.ctrlKey === expected.ctrl &&\n                        !!e.shiftKey === expected.shift &&\n                        !!e.altKey === expected.alt &&\n                        !!e.metaKey === expected.meta;\n                };\n                defineChildModifier(_this, filters, propName, filter, children);\n                return _this[propName];\n            };\n            Object.defineProperty(this, \"exact\", {\n                value: exactFunction,\n                enumerable: true\n            });\n            return exactFunction;\n        },\n        enumerable: true,\n        configurable: true\n    });\n}\nfunction createModifier(filters, children) {\n    function m(arg) {\n        if (arg instanceof Function) {\n            // EventHandler => EventHandler\n            return function (event) { return handleEvent(event, filters, arg); };\n        }\n        else {\n            // Event => void\n            handleEvent(arg, filters);\n            return;\n        }\n    }\n    if (children.keyboard || children.mouse) {\n        var nextChildren = __assign({}, children, { keyboard: false, mouse: false });\n        if (children.keyboard) {\n            defineKeyCodeModifiers(m, filters, nextChildren);\n            defineKeys(m, filters, nextChildren);\n        }\n        if (children.mouse) {\n            defineChildModifier(m, filters, \"middle\", function (e) { return e.button === 1; }, nextChildren);\n        }\n        defineChildModifier(m, filters, \"left\", function (e) { return e.keyCode === 37 || e.button === 0; }, nextChildren);\n        defineChildModifier(m, filters, \"right\", function (e) { return e.keyCode === 39 || e.button === 2; }, nextChildren);\n    }\n    if (children.exact) {\n        var nextChildren = __assign({}, children, { exact: false, modkey: false });\n        defineExact(m, filters, nextChildren);\n    }\n    if (children.modkey) {\n        var nextChildren = __assign({}, children, { exact: false });\n        defineChildModifier(m, filters, \"ctrl\", function (e) { return e.ctrlKey; }, nextChildren);\n        defineChildModifier(m, filters, \"shift\", function (e) { return e.shiftKey; }, nextChildren);\n        defineChildModifier(m, filters, \"alt\", function (e) { return e.altKey; }, nextChildren);\n        defineChildModifier(m, filters, \"meta\", function (e) { return e.metaKey; }, nextChildren);\n        defineChildModifier(m, filters, \"noctrl\", function (e) { return !e.ctrlKey; }, nextChildren);\n        defineChildModifier(m, filters, \"noshift\", function (e) { return !e.shiftKey; }, nextChildren);\n        defineChildModifier(m, filters, \"noalt\", function (e) { return !e.altKey; }, nextChildren);\n        defineChildModifier(m, filters, \"nometa\", function (e) { return !e.metaKey; }, nextChildren);\n    }\n    defineChildModifier(m, filters, \"stop\", function (e) { return e.stopPropagation() || true; }, children);\n    defineChildModifier(m, filters, \"prevent\", function (e) { return e.preventDefault() || true; }, children);\n    defineChildModifier(m, filters, \"self\", function (e) { return e.target === e.currentTarget; }, children);\n    return m;\n}\nexports.modifiers = createModifier([], {\n    keyboard: true,\n    mouse: true,\n    modkey: true,\n    exact: true\n});\n//# sourceMappingURL=data:application/json;base64,\n\n/***/ }),\n\n/***/ \"6762\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// https://github.com/tc39/Array.prototype.includes\nvar $export = __webpack_require__(\"5ca1\");\nvar $includes = __webpack_require__(\"c366\")(true);\n\n$export($export.P, 'Array', {\n  includes: function includes(el /* , fromIndex = 0 */) {\n    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n\n__webpack_require__(\"9c6c\")('includes');\n\n\n/***/ }),\n\n/***/ \"6821\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = __webpack_require__(\"626a\");\nvar defined = __webpack_require__(\"be13\");\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n\n\n/***/ }),\n\n/***/ \"69a8\":\n/***/ (function(module, exports) {\n\nvar hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n\n\n/***/ }),\n\n/***/ \"6a99\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = __webpack_require__(\"d3f4\");\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n\n\n/***/ }),\n\n/***/ \"6b54\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n__webpack_require__(\"3846\");\nvar anObject = __webpack_require__(\"cb7c\");\nvar $flags = __webpack_require__(\"0bfb\");\nvar DESCRIPTORS = __webpack_require__(\"9e1e\");\nvar TO_STRING = 'toString';\nvar $toString = /./[TO_STRING];\n\nvar define = function (fn) {\n  __webpack_require__(\"2aba\")(RegExp.prototype, TO_STRING, fn, true);\n};\n\n// 21.2.5.14 RegExp.prototype.toString()\nif (__webpack_require__(\"79e5\")(function () { return $toString.call({ source: 'a', flags: 'b' }) != '/a/b'; })) {\n  define(function toString() {\n    var R = anObject(this);\n    return '/'.concat(R.source, '/',\n      'flags' in R ? R.flags : !DESCRIPTORS && R instanceof RegExp ? $flags.call(R) : undefined);\n  });\n// FF44- RegExp#toString has a wrong name\n} else if ($toString.name != TO_STRING) {\n  define(function toString() {\n    return $toString.call(this);\n  });\n}\n\n\n/***/ }),\n\n/***/ \"7333\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = __webpack_require__(\"0d58\");\nvar gOPS = __webpack_require__(\"2621\");\nvar pIE = __webpack_require__(\"52a7\");\nvar toObject = __webpack_require__(\"4bf8\");\nvar IObject = __webpack_require__(\"626a\");\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || __webpack_require__(\"79e5\")(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n\n\n/***/ }),\n\n/***/ \"7514\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = __webpack_require__(\"5ca1\");\nvar $find = __webpack_require__(\"0a49\")(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n__webpack_require__(\"9c6c\")(KEY);\n\n\n/***/ }),\n\n/***/ \"7726\":\n/***/ (function(module, exports) {\n\n// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"77f1\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar toInteger = __webpack_require__(\"4588\");\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n\n\n/***/ }),\n\n/***/ \"79e5\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n\n\n/***/ }),\n\n/***/ \"7a1a\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M22.667 4l7 6-7 6 7 6-7 6v-4h-3.653l-3.76-3.76 2.827-2.827L20.668 20h2v-8h-2l-12 12h-6v-4h4.347l12-12h3.653V4zm-20 4h6l3.76 3.76L9.6 14.587 7.013 12H2.666V8z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"7a56\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global = __webpack_require__(\"7726\");\nvar dP = __webpack_require__(\"86cc\");\nvar DESCRIPTORS = __webpack_require__(\"9e1e\");\nvar SPECIES = __webpack_require__(\"2b4c\")('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n\n\n/***/ }),\n\n/***/ \"7f20\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar def = __webpack_require__(\"86cc\").f;\nvar has = __webpack_require__(\"69a8\");\nvar TAG = __webpack_require__(\"2b4c\")('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n\n\n/***/ }),\n\n/***/ \"7f7f\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar dP = __webpack_require__(\"86cc\").f;\nvar FProto = Function.prototype;\nvar nameRE = /^\\s*function ([^ (]*)/;\nvar NAME = 'name';\n\n// 19.2.4.2 name\nNAME in FProto || __webpack_require__(\"9e1e\") && dP(FProto, NAME, {\n  configurable: true,\n  get: function () {\n    try {\n      return ('' + this).match(nameRE)[1];\n    } catch (e) {\n      return '';\n    }\n  }\n});\n\n\n/***/ }),\n\n/***/ \"8079\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar macrotask = __webpack_require__(\"1991\").set;\nvar Observer = global.MutationObserver || global.WebKitMutationObserver;\nvar process = global.process;\nvar Promise = global.Promise;\nvar isNode = __webpack_require__(\"2d95\")(process) == 'process';\n\nmodule.exports = function () {\n  var head, last, notify;\n\n  var flush = function () {\n    var parent, fn;\n    if (isNode && (parent = process.domain)) parent.exit();\n    while (head) {\n      fn = head.fn;\n      head = head.next;\n      try {\n        fn();\n      } catch (e) {\n        if (head) notify();\n        else last = undefined;\n        throw e;\n      }\n    } last = undefined;\n    if (parent) parent.enter();\n  };\n\n  // Node.js\n  if (isNode) {\n    notify = function () {\n      process.nextTick(flush);\n    };\n  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339\n  } else if (Observer && !(global.navigator && global.navigator.standalone)) {\n    var toggle = true;\n    var node = document.createTextNode('');\n    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new\n    notify = function () {\n      node.data = toggle = !toggle;\n    };\n  // environments with maybe non-completely correct, but existent Promise\n  } else if (Promise && Promise.resolve) {\n    // Promise.resolve without an argument throws an error in LG WebOS 2\n    var promise = Promise.resolve(undefined);\n    notify = function () {\n      promise.then(flush);\n    };\n  // for other environments - macrotask based on:\n  // - setImmediate\n  // - MessageChannel\n  // - window.postMessag\n  // - onreadystatechange\n  // - setTimeout\n  } else {\n    notify = function () {\n      // strange IE + webpack dev server bug - use .call(global)\n      macrotask.call(global, flush);\n    };\n  }\n\n  return function (fn) {\n    var task = { fn: fn, next: undefined };\n    if (last) last.next = task;\n    if (!head) {\n      head = task;\n      notify();\n    } last = task;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"8378\":\n/***/ (function(module, exports) {\n\nvar core = module.exports = { version: '2.5.7' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n\n\n/***/ }),\n\n/***/ \"84d8\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 16 31\"}},[_c('path',{attrs:{\"d\":\"M15.552 15.168q.448.32.448.832 0 .448-.448.768L1.856 25.28q-.768.512-1.312.192T0 24.192V7.744q0-.96.544-1.28t1.312.192z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"84f2\":\n/***/ (function(module, exports) {\n\nmodule.exports = {};\n\n\n/***/ }),\n\n/***/ \"86cc\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(\"cb7c\");\nvar IE8_DOM_DEFINE = __webpack_require__(\"c69a\");\nvar toPrimitive = __webpack_require__(\"6a99\");\nvar dP = Object.defineProperty;\n\nexports.f = __webpack_require__(\"9e1e\") ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n\n\n/***/ }),\n\n/***/ \"885d\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M4 16C4 9.4 9.4 4 16 4s12 5.4 12 12c0 1.2-.8 2-2 2s-2-.8-2-2c0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.2 0 2 .8 2 2s-.8 2-2 2C9.4 28 4 22.6 4 16z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"8b97\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = __webpack_require__(\"d3f4\");\nvar anObject = __webpack_require__(\"cb7c\");\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = __webpack_require__(\"9b43\")(Function.call, __webpack_require__(\"11e9\").f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n\n\n/***/ }),\n\n/***/ \"8bbf\":\n/***/ (function(module, exports) {\n\nmodule.exports = require(\"vue\");\n\n/***/ }),\n\n/***/ \"906b\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 22 32\"}},[_c('path',{attrs:{\"d\":\"M20.8 14.4q.704 0 1.152.48T22.4 16t-.48 1.12-1.12.48H1.6q-.64 0-1.12-.48T0 16t.448-1.12T1.6 14.4h19.2zM1.6 11.2q-.64 0-1.12-.48T0 9.6t.448-1.12T1.6 8h19.2q.704 0 1.152.48T22.4 9.6t-.48 1.12-1.12.48H1.6zm19.2 9.6q.704 0 1.152.48t.448 1.12-.48 1.12-1.12.48H1.6q-.64 0-1.12-.48T0 22.4t.448-1.12T1.6 20.8h19.2z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"9093\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = __webpack_require__(\"ce10\");\nvar hiddenKeys = __webpack_require__(\"e11e\").concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n\n\n/***/ }),\n\n/***/ \"96cf\":\n/***/ (function(module, exports) {\n\n/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n!(function(global) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  var inModule = typeof module === \"object\";\n  var runtime = global.regeneratorRuntime;\n  if (runtime) {\n    if (inModule) {\n      // If regeneratorRuntime is defined globally and we're in a module,\n      // make the exports object identical to regeneratorRuntime.\n      module.exports = runtime;\n    }\n    // Don't bother evaluating the rest of this file if the runtime was\n    // already defined globally.\n    return;\n  }\n\n  // Define the runtime globally (as expected by generated code) as either\n  // module.exports (if we're in a module) or a new, empty object.\n  runtime = global.regeneratorRuntime = inModule ? module.exports : {};\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  runtime.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunctionPrototype[toStringTagSymbol] =\n    GeneratorFunction.displayName = \"GeneratorFunction\";\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      prototype[method] = function(arg) {\n        return this._invoke(method, arg);\n      };\n    });\n  }\n\n  runtime.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  runtime.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      if (!(toStringTagSymbol in genFun)) {\n        genFun[toStringTagSymbol] = \"GeneratorFunction\";\n      }\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  runtime.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return Promise.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return Promise.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration. If the Promise is rejected, however, the\n          // result for this iteration will be rejected with the same\n          // reason. Note that rejections of yielded Promises are not\n          // thrown back into the generator function, as is the case\n          // when an awaited Promise is rejected. This difference in\n          // behavior between yield and await is important, because it\n          // allows the consumer to decide what to do with the yielded\n          // rejection (swallow it and continue, manually .throw it back\n          // into the generator, abandon iteration, whatever). With\n          // await, by contrast, there is no opportunity to examine the\n          // rejection reason outside the generator function, so the\n          // only option is to throw it from the await expression, and\n          // let the generator function handle the exception.\n          result.value = unwrapped;\n          resolve(result);\n        }, reject);\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new Promise(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  runtime.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  runtime.async = function(innerFn, outerFn, self, tryLocsList) {\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList)\n    );\n\n    return runtime.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        if (delegate.iterator.return) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  Gp[toStringTagSymbol] = \"Generator\";\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  runtime.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  runtime.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n})(\n  // In sloppy mode, unbound `this` refers to the global object, fallback to\n  // Function constructor if we're in global strict mode. That is sadly a form\n  // of indirect eval which violates Content Security Policy.\n  (function() { return this })() || Function(\"return this\")()\n);\n\n\n/***/ }),\n\n/***/ \"9744\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar toInteger = __webpack_require__(\"4588\");\nvar defined = __webpack_require__(\"be13\");\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n\n\n/***/ }),\n\n/***/ \"9b43\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// optional / simple context binding\nvar aFunction = __webpack_require__(\"d8e8\");\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n\n\n/***/ }),\n\n/***/ \"9c6c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = __webpack_require__(\"2b4c\")('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) __webpack_require__(\"32e9\")(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n\n\n/***/ }),\n\n/***/ \"9c80\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (exec) {\n  try {\n    return { e: false, v: exec() };\n  } catch (e) {\n    return { e: true, v: e };\n  }\n};\n\n\n/***/ }),\n\n/***/ \"9def\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.1.15 ToLength\nvar toInteger = __webpack_require__(\"4588\");\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n\n\n/***/ }),\n\n/***/ \"9e1e\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// Thank's IE8 for his funny defineProperty\nmodule.exports = !__webpack_require__(\"79e5\")(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"a25f\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar global = __webpack_require__(\"7726\");\nvar navigator = global.navigator;\n\nmodule.exports = navigator && navigator.userAgent || '';\n\n\n/***/ }),\n\n/***/ \"a481\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// @@replace logic\n__webpack_require__(\"214f\")('replace', 2, function (defined, REPLACE, $replace) {\n  // 21.1.3.14 String.prototype.replace(searchValue, replaceValue)\n  return [function replace(searchValue, replaceValue) {\n    'use strict';\n    var O = defined(this);\n    var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n    return fn !== undefined\n      ? fn.call(searchValue, O, replaceValue)\n      : $replace.call(String(O), searchValue, replaceValue);\n  }, $replace];\n});\n\n\n/***/ }),\n\n/***/ \"a5b8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// 25.4.1.5 NewPromiseCapability(C)\nvar aFunction = __webpack_require__(\"d8e8\");\n\nfunction PromiseCapability(C) {\n  var resolve, reject;\n  this.promise = new C(function ($$resolve, $$reject) {\n    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');\n    resolve = $$resolve;\n    reject = $$reject;\n  });\n  this.resolve = aFunction(resolve);\n  this.reject = aFunction(reject);\n}\n\nmodule.exports.f = function (C) {\n  return new PromiseCapability(C);\n};\n\n\n/***/ }),\n\n/***/ \"aa77\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"5ca1\");\nvar defined = __webpack_require__(\"be13\");\nvar fails = __webpack_require__(\"79e5\");\nvar spaces = __webpack_require__(\"fdef\");\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n/***/ }),\n\n/***/ \"aae3\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.2.8 IsRegExp(argument)\nvar isObject = __webpack_require__(\"d3f4\");\nvar cof = __webpack_require__(\"2d95\");\nvar MATCH = __webpack_require__(\"2b4c\")('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n\n\n/***/ }),\n\n/***/ \"ab57\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"2350\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \".aplayer{background:#fff;font-family:Arial,Helvetica,sans-serif;margin:5px;-webkit-box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);box-shadow:0 2px 2px 0 rgba(0,0,0,.07),0 1px 5px 0 rgba(0,0,0,.1);border-radius:2px;overflow:hidden;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;line-height:normal;position:relative}.aplayer *{-webkit-box-sizing:content-box;box-sizing:content-box}.aplayer svg{width:100%;height:100%}.aplayer svg circle,.aplayer svg path{fill:#fff}.aplayer.aplayer-withlist .aplayer-info{border-bottom:1px solid #e9e9e9}.aplayer.aplayer-withlist .aplayer-list{display:block;width:100%}.aplayer.aplayer-withlist .aplayer-icon-order,.aplayer.aplayer-withlist .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu{display:inline}.aplayer.aplayer-withlrc .aplayer-pic{height:90px;width:90px}.aplayer.aplayer-withlrc .aplayer-info{margin-left:90px;height:90px;padding:10px 7px 0 7px}.aplayer.aplayer-withlrc .aplayer-lrc{display:block}.aplayer.aplayer-narrow{width:66px}.aplayer.aplayer-narrow .aplayer-info,.aplayer.aplayer-narrow .aplayer-list{display:none}.aplayer.aplayer-narrow .aplayer-body,.aplayer.aplayer-narrow .aplayer-pic{height:66px;width:66px}.aplayer.aplayer-fixed{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;overflow:visible;max-width:400px;-webkit-box-shadow:none;box-shadow:none}.aplayer.aplayer-fixed .aplayer-list{margin-bottom:65px;border:1px solid #eee;border-bottom:none;-webkit-box-sizing:border-box;box-sizing:border-box}.aplayer.aplayer-fixed .aplayer-body{position:fixed;bottom:0;left:0;right:0;margin:0;z-index:99;background:#fff;padding-right:18px;-webkit-transition:width .3s ease;transition:width .3s ease;max-width:400px;width:calc(100% - 18px)}.aplayer.aplayer-fixed .aplayer-lrc{display:block;position:fixed;bottom:10px;left:0;right:0;margin:0;z-index:98;pointer-events:none;text-shadow:-1px -1px 0 #fff}.aplayer.aplayer-fixed .aplayer-lrc:after,.aplayer.aplayer-fixed .aplayer-lrc:before{display:none}.aplayer.aplayer-fixed .aplayer-info{-webkit-transform:scaleX(1);transform:scaleX(1);-webkit-transform-origin:0 0;transform-origin:0 0;-webkit-transition:all .3s ease;transition:all .3s ease;border-bottom:none;border-top:1px solid #e9e9e9}.aplayer.aplayer-fixed .aplayer-info .aplayer-music{width:calc(100% - 105px)}.aplayer.aplayer-fixed .aplayer-miniswitcher{display:block}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-info{display:block;-webkit-transform:scaleX(0);transform:scaleX(0)}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-body{width:66px!important}.aplayer.aplayer-fixed.aplayer-narrow .aplayer-miniswitcher .aplayer-icon{-webkit-transform:rotateY(0);transform:rotateY(0)}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-lrc,.aplayer.aplayer-fixed .aplayer-icon-play{display:inline-block}.aplayer.aplayer-fixed .aplayer-icon-back,.aplayer.aplayer-fixed .aplayer-icon-forward,.aplayer.aplayer-fixed .aplayer-icon-menu,.aplayer.aplayer-fixed .aplayer-icon-play{position:absolute;bottom:27px;width:20px;height:20px}.aplayer.aplayer-fixed .aplayer-icon-back{right:75px}.aplayer.aplayer-fixed .aplayer-icon-play{right:50px}.aplayer.aplayer-fixed .aplayer-icon-forward{right:25px}.aplayer.aplayer-fixed .aplayer-icon-menu{right:0}.aplayer.aplayer-arrow .aplayer-icon-loop,.aplayer.aplayer-arrow .aplayer-icon-order,.aplayer.aplayer-mobile .aplayer-icon-volume-down,.aplayer.aplayer-mobile .aplayer-icon-volume-up{display:none}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-loading-icon{display:block}.aplayer.aplayer-loading .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-body{position:relative}.aplayer .aplayer-icon{width:15px;height:15px;border:none;background-color:transparent;outline:none;cursor:pointer;opacity:.8;vertical-align:middle;padding:0;font-size:12px;margin:0;display:inline-block}.aplayer .aplayer-icon path{-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.aplayer .aplayer-icon-back,.aplayer .aplayer-icon-forward,.aplayer .aplayer-icon-lrc,.aplayer .aplayer-icon-order,.aplayer .aplayer-icon-play{display:none}.aplayer .aplayer-icon-lrc-inactivity svg{opacity:.4}.aplayer .aplayer-icon-forward{-webkit-transform:rotate(180deg);transform:rotate(180deg)}.aplayer .aplayer-lrc-content{display:none}.aplayer .aplayer-pic{position:relative;float:left;height:66px;width:66px;background-size:cover;background-position:50%;-webkit-transition:all .3s ease;transition:all .3s ease;cursor:pointer}.aplayer .aplayer-pic:hover .aplayer-button{opacity:1}.aplayer .aplayer-pic .aplayer-button{position:absolute;border-radius:50%;opacity:.8;text-shadow:0 1px 1px rgba(0,0,0,.2);-webkit-box-shadow:0 1px 1px rgba(0,0,0,.2);box-shadow:0 1px 1px rgba(0,0,0,.2);background:rgba(0,0,0,.2);-webkit-transition:all .1s ease;transition:all .1s ease}.aplayer .aplayer-pic .aplayer-button path{fill:#fff}.aplayer .aplayer-pic .aplayer-hide{display:none}.aplayer .aplayer-pic .aplayer-play{width:26px;height:26px;border:2px solid #fff;bottom:50%;right:50%;margin:0 -15px -15px 0}.aplayer .aplayer-pic .aplayer-play svg{position:absolute;top:3px;left:4px;height:20px;width:20px}.aplayer .aplayer-pic .aplayer-pause{width:16px;height:16px;border:2px solid #fff;bottom:4px;right:4px}.aplayer .aplayer-pic .aplayer-pause svg{position:absolute;top:2px;left:2px;height:12px;width:12px}.aplayer .aplayer-info{margin-left:66px;padding:14px 7px 0 10px;height:66px;-webkit-box-sizing:border-box;box-sizing:border-box}.aplayer .aplayer-info .aplayer-music{overflow:hidden;white-space:nowrap;text-overflow:ellipsis;margin:0 0 13px 5px;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default;padding-bottom:2px;height:20px}.aplayer .aplayer-info .aplayer-music .aplayer-title{font-size:14px}.aplayer .aplayer-info .aplayer-music .aplayer-author{font-size:12px;color:#666}.aplayer .aplayer-info .aplayer-controller{position:relative;display:-webkit-box;display:-ms-flexbox;display:flex}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap{margin:0 0 0 5px;padding:4px 0;cursor:pointer!important;-webkit-box-flex:1;-ms-flex:1;flex:1}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap:hover .aplayer-bar .aplayer-played .aplayer-thumb{-webkit-transform:scale(1);transform:scale(1)}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar{position:relative;height:2px;width:100%;background:#cdcdcd}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-loaded{position:absolute;left:0;top:0;bottom:0;background:#aaa;height:2px;-webkit-transition:all .5s ease;transition:all .5s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played{position:absolute;left:0;top:0;bottom:0;height:2px;-webkit-transition:background-color .3s ease;transition:background-color .3s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-bar-wrap .aplayer-bar .aplayer-played .aplayer-thumb{position:absolute;top:0;right:5px;margin-top:-4px;margin-right:-10px;height:10px;width:10px;border-radius:50%;cursor:pointer;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;-webkit-transform:scale(0);transform:scale(0)}.aplayer .aplayer-info .aplayer-controller .aplayer-time{position:relative;right:0;bottom:4px;height:17px;color:#999;font-size:11px;padding-left:7px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-time-inner{vertical-align:middle}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon{cursor:pointer;-webkit-transition:all .2s ease;transition:all .2s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon path{fill:#666}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-loop{margin-right:2px}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon:hover path{fill:#000}.aplayer .aplayer-info .aplayer-controller .aplayer-time .aplayer-icon.aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-menu,.aplayer .aplayer-info .aplayer-controller .aplayer-time.aplayer-time-narrow .aplayer-icon-mode{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap{position:relative;display:inline-block;margin-left:3px;cursor:pointer!important}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap:hover .aplayer-volume-bar-wrap{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap{position:absolute;bottom:15px;right:-3px;width:25px;height:0;z-index:99;overflow:hidden;-webkit-transition:all .2s ease-in-out;transition:all .2s ease-in-out}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap.aplayer-volume-bar-wrap-active{height:40px}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar{position:absolute;bottom:0;right:10px;width:5px;height:35px;background:#aaa;border-radius:2.5px;overflow:hidden}.aplayer .aplayer-info .aplayer-controller .aplayer-volume-wrap .aplayer-volume-bar-wrap .aplayer-volume-bar .aplayer-volume{position:absolute;bottom:0;right:0;width:5px;-webkit-transition:all .1s ease;transition:all .1s ease}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon{display:none}.aplayer .aplayer-info .aplayer-controller .aplayer-loading-icon svg{position:absolute;-webkit-animation:rotate 1s linear infinite;animation:rotate 1s linear infinite}.aplayer .aplayer-lrc{display:none;position:relative;height:30px;text-align:center;overflow:hidden;margin:-10px 0 7px}.aplayer .aplayer-lrc:before{top:0;height:10%;background:-webkit-gradient(linear,left top,left bottom,from(#fff),to(hsla(0,0%,100%,0)));background:linear-gradient(180deg,#fff 0,hsla(0,0%,100%,0));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\\\"#ffffff\\\",endColorstr=\\\"#00ffffff\\\",GradientType=0)}.aplayer .aplayer-lrc:after,.aplayer .aplayer-lrc:before{position:absolute;z-index:1;display:block;overflow:hidden;width:100%;content:\\\" \\\"}.aplayer .aplayer-lrc:after{bottom:0;height:33%;background:-webkit-gradient(linear,left top,left bottom,from(hsla(0,0%,100%,0)),to(hsla(0,0%,100%,.8)));background:linear-gradient(180deg,hsla(0,0%,100%,0) 0,hsla(0,0%,100%,.8));filter:progid:DXImageTransform.Microsoft.gradient(startColorstr=\\\"#00ffffff\\\",endColorstr=\\\"#ccffffff\\\",GradientType=0)}.aplayer .aplayer-lrc p{font-size:12px;color:#666;line-height:16px!important;height:16px!important;padding:0!important;margin:0!important;-webkit-transition-property:font-size,color,opacity;transition-property:font-size,color,opacity;-webkit-transition-timing-function:ease-out;transition-timing-function:ease-out;-webkit-transition-duration:.5s;transition-duration:.5s;opacity:.4;overflow:hidden}.aplayer .aplayer-lrc p.aplayer-lrc-current{opacity:1;overflow:visible;height:auto!important;min-height:16px}.aplayer .aplayer-lrc.aplayer-lrc-hide{display:none}.aplayer .aplayer-lrc .aplayer-lrc-contents{width:100%;-webkit-transition:all .5s ease-out;transition:all .5s ease-out;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text;cursor:default}.aplayer .aplayer-list{overflow:auto;-webkit-transition:all .5s ease;transition:all .5s ease;will-change:height;display:none;overflow:hidden;list-style-type:none;margin:0;padding:0;overflow-y:auto}.aplayer .aplayer-list::-webkit-scrollbar{width:5px}.aplayer .aplayer-list::-webkit-scrollbar-thumb{border-radius:3px;background-color:#eee}.aplayer .aplayer-list::-webkit-scrollbar-thumb:hover{background-color:#ccc}.aplayer .aplayer-list li{position:relative;height:32px;line-height:32px;padding:0 15px;font-size:12px;border-top:1px solid #e9e9e9;cursor:pointer;-webkit-transition:all .2s ease;transition:all .2s ease;overflow:hidden;margin:0}.aplayer .aplayer-list li:first-child{border-top:none}.aplayer .aplayer-list li:hover{background:#efefef}.aplayer .aplayer-list li.aplayer-list-light{background:#e9e9e9}.aplayer .aplayer-list li.aplayer-list-light .aplayer-list-cur{display:inline-block}.aplayer .aplayer-list li .aplayer-list-cur{display:none;width:3px;height:22px;position:absolute;left:0;top:5px;-webkit-transition:background-color .3s ease;transition:background-color .3s ease;cursor:pointer}.aplayer .aplayer-list li .aplayer-list-index{color:#666;margin-right:12px;cursor:pointer}.aplayer .aplayer-list li .aplayer-list-author{color:#666;float:right;cursor:pointer}.aplayer .aplayer-notice{opacity:0;position:absolute;z-index:1;top:50%;left:50%;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%);font-size:12px;border-radius:4px;padding:5px 10px;-webkit-transition:all .3s ease-in-out;transition:all .3s ease-in-out;overflow:hidden;color:#fff;pointer-events:none;background-color:#f4f4f5;color:#909399}.aplayer .aplayer-miniswitcher{display:none;position:absolute;top:0;right:0;bottom:0;height:100%;background:#e6e6e6;width:18px;border-radius:0 2px 2px 0}.aplayer .aplayer-miniswitcher .aplayer-icon{height:100%;width:100%;-webkit-transform:rotateY(180deg);transform:rotateY(180deg);-webkit-transition:all .3s ease;transition:all .3s ease}.aplayer .aplayer-miniswitcher .aplayer-icon path{fill:#666}.aplayer .aplayer-miniswitcher .aplayer-icon:hover path{fill:#000}@-webkit-keyframes aplayer-roll{0%{left:0}to{left:-100%}}@keyframes aplayer-roll{0%{left:0}to{left:-100%}}@-webkit-keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}@keyframes rotate{0%{-webkit-transform:rotate(0);transform:rotate(0)}to{-webkit-transform:rotate(1turn);transform:rotate(1turn)}}\", \"\"]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"ac6a\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $iterators = __webpack_require__(\"cadf\");\nvar getKeys = __webpack_require__(\"0d58\");\nvar redefine = __webpack_require__(\"2aba\");\nvar global = __webpack_require__(\"7726\");\nvar hide = __webpack_require__(\"32e9\");\nvar Iterators = __webpack_require__(\"84f2\");\nvar wks = __webpack_require__(\"2b4c\");\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n\n\n/***/ }),\n\n/***/ \"adec\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 28 32\"}},[_c('path',{attrs:{\"d\":\"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"b349\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vue_1 = __importDefault(__webpack_require__(\"8bbf\"));\nvar Component = /** @class */ (function (_super) {\n    __extends(Component, _super);\n    function Component() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._tsxattrs = undefined;\n        _this.$scopedSlots = undefined;\n        return _this;\n    }\n    return Component;\n}(vue_1.default));\nexports.Component = Component;\n/**\n * Create component from component options (Compatible with Vue.extend)\n */\nfunction createComponent(opts) {\n    return vue_1.default.extend(opts);\n}\nexports.createComponent = createComponent;\nvar factoryImpl = {\n    convert: function (c) { return c; },\n    extendFrom: function (c) { return c; }\n};\n/**\n * Specify Props and Event types of component\n *\n * Usage:\n *  // Get TSX-supported component with props(`name`, `value`) and event(`onInput`)\n *  const NewComponent = tsx.ofType<{ name: string, value: string }, { onInput: string }>.convert(Component);\n */\nfunction ofType() {\n    return factoryImpl;\n}\nexports.ofType = ofType;\nfunction withNativeOn(componentType) {\n    return componentType;\n}\nexports.withNativeOn = withNativeOn;\nfunction withHtmlAttrs(componentType) {\n    return componentType;\n}\nexports.withHtmlAttrs = withHtmlAttrs;\nfunction withUnknownProps(componentType) {\n    return componentType;\n}\nexports.withUnknownProps = withUnknownProps;\nfunction createComponentFactory(base, mixins) {\n    return {\n        create: function (options) {\n            var mergedMixins = options.mixins\n                ? options.mixins.concat(mixins) : mixins;\n            return base.extend(__assign({}, options, { mixins: mergedMixins }));\n        },\n        mixin: function (mixinObject) {\n            return createComponentFactory(base, mixins.concat([mixinObject]));\n        }\n    };\n}\nfunction createExtendableComponentFactory() {\n    return {\n        create: function (options) {\n            return vue_1.default.extend(options);\n        },\n        extendFrom: function (base) {\n            return createComponentFactory(base, []);\n        },\n        mixin: function (mixinObject) {\n            return createComponentFactory(vue_1.default, [mixinObject]);\n        }\n    };\n}\nexports.componentFactory = createExtendableComponentFactory();\nfunction componentFactoryOf() {\n    return exports.componentFactory;\n}\nexports.componentFactoryOf = componentFactoryOf;\n/**\n * Shorthand of `componentFactory.create`\n */\nexports.component = exports.componentFactory.create;\nexports.extendFrom = exports.componentFactory.extendFrom;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLDRDQUlhO0FBK0JiO0lBSVUsNkJBQUc7SUFKYjtRQUFBLHFFQVdDO1FBTkMsZUFBUyxHQUlMLFNBQWdCLENBQUM7UUFDckIsa0JBQVksR0FBZ0MsU0FBZ0IsQ0FBQzs7SUFDL0QsQ0FBQztJQUFELGdCQUFDO0FBQUQsQ0FBQyxBQVhELENBSVUsYUFBRyxHQU9aO0FBWFksOEJBQVM7QUFhdEI7O0dBRUc7QUFDSCx5QkFDRSxJQUF3RDtJQUV4RCxPQUFPLGFBQUcsQ0FBQyxNQUFNLENBQUMsSUFBVyxDQUFRLENBQUM7QUFDeEMsQ0FBQztBQUpELDBDQUlDO0FBV0QsSUFBTSxXQUFXLEdBQUc7SUFDbEIsT0FBTyxFQUFFLFVBQUMsQ0FBTSxJQUFLLE9BQUEsQ0FBQyxFQUFELENBQUM7SUFDdEIsVUFBVSxFQUFFLFVBQUMsQ0FBTSxJQUFLLE9BQUEsQ0FBQyxFQUFELENBQUM7Q0FDMUIsQ0FBQztBQUVGOzs7Ozs7R0FNRztBQUNIO0lBS0UsT0FBTyxXQUFXLENBQUM7QUFDckIsQ0FBQztBQU5ELHdCQU1DO0FBRUQsc0JBQ0UsYUFBaUI7SUFFakIsT0FBTyxhQUFvQixDQUFDO0FBQzlCLENBQUM7QUFKRCxvQ0FJQztBQUVELHVCQUNFLGFBQWlCO0lBRWpCLE9BQU8sYUFBb0IsQ0FBQztBQUM5QixDQUFDO0FBSkQsc0NBSUM7QUFFRCwwQkFDRSxhQUFpQjtJQUVqQixPQUFPLGFBQW9CLENBQUM7QUFDOUIsQ0FBQztBQUpELDRDQUlDO0FBeUhELGdDQUNFLElBQWdCLEVBQ2hCLE1BQWE7SUFFYixPQUFPO1FBQ0wsTUFBTSxFQUFOLFVBQU8sT0FBWTtZQUNqQixJQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTTtnQkFDakMsQ0FBQyxDQUFLLE9BQU8sQ0FBQyxNQUFNLFFBQUssTUFBTSxFQUMvQixDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ1gsT0FBTyxJQUFJLENBQUMsTUFBTSxjQUFNLE9BQU8sSUFBRSxNQUFNLEVBQUUsWUFBWSxJQUFHLENBQUM7UUFDM0QsQ0FBQztRQUNELEtBQUssRUFBTCxVQUFNLFdBQWdCO1lBQ3BCLE9BQU8sc0JBQXNCLENBQUMsSUFBSSxFQUFNLE1BQU0sU0FBRSxXQUFXLEdBQUUsQ0FBQztRQUNoRSxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFRDtJQU9FLE9BQU87UUFDTCxNQUFNLEVBQU4sVUFBTyxPQUFZO1lBQ2pCLE9BQU8sYUFBRyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM3QixDQUFDO1FBQ0QsVUFBVSxFQUFWLFVBQVcsSUFBZ0I7WUFDekIsT0FBTyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUNELEtBQUssRUFBTCxVQUFNLFdBQWdCO1lBQ3BCLE9BQU8sc0JBQXNCLENBQUMsYUFBRyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQztRQUNwRCxDQUFDO0tBQ0YsQ0FBQztBQUNKLENBQUM7QUFFWSxRQUFBLGdCQUFnQixHQU16QixnQ0FBZ0MsRUFBRSxDQUFDO0FBRXZDO0lBVUUsT0FBTyx3QkFBdUIsQ0FBQztBQUNqQyxDQUFDO0FBWEQsZ0RBV0M7QUFFRDs7R0FFRztBQUNVLFFBQUEsU0FBUyxHQUFHLHdCQUFnQixDQUFDLE1BQU0sQ0FBQztBQUNwQyxRQUFBLFVBQVUsR0FBRyx3QkFBZ0IsQ0FBQyxVQUFVLENBQUMifQ==\n\n/***/ }),\n\n/***/ \"bcaa\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar anObject = __webpack_require__(\"cb7c\");\nvar isObject = __webpack_require__(\"d3f4\");\nvar newPromiseCapability = __webpack_require__(\"a5b8\");\n\nmodule.exports = function (C, x) {\n  anObject(C);\n  if (isObject(x) && x.constructor === C) return x;\n  var promiseCapability = newPromiseCapability.f(C);\n  var resolve = promiseCapability.resolve;\n  resolve(x);\n  return promiseCapability.promise;\n};\n\n\n/***/ }),\n\n/***/ \"bdba\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 28 32\"}},[_c('path',{attrs:{\"d\":\"M13.728 6.272v19.456q0 .448-.352.8t-.8.32-.8-.32l-5.952-5.952H1.152q-.48 0-.8-.352t-.352-.8v-6.848q0-.48.352-.8t.8-.352h4.672l5.952-5.952q.32-.32.8-.32t.8.32.352.8zM20.576 16q0 1.344-.768 2.528t-2.016 1.664q-.16.096-.448.096-.448 0-.8-.32t-.32-.832q0-.384.192-.64t.544-.448.608-.384.512-.64.192-1.024-.192-1.024-.512-.64-.608-.384-.544-.448-.192-.64q0-.48.32-.832t.8-.32q.288 0 .448.096 1.248.48 2.016 1.664T20.576 16z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"be13\":\n/***/ (function(module, exports) {\n\n// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"bf5c\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 32 32\"}},[_c('path',{attrs:{\"d\":\"M22 16L11.895 5.4 10 7.387 18.211 16 10 24.612l1.895 1.988 8.211-8.613z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"c366\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = __webpack_require__(\"6821\");\nvar toLength = __webpack_require__(\"9def\");\nvar toAbsoluteIndex = __webpack_require__(\"77f1\");\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n\n\n/***/ }),\n\n/***/ \"c3ab\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 29 32\"}},[_c('path',{attrs:{\"d\":\"M2.667 7.027l1.707-1.693 22.293 22.293-1.693 1.707-4-4H9.334v4l-5.333-5.333 5.333-5.333v4h8.973l-8.973-8.973v.973H6.667v-3.64l-4-4zm20 10.306h2.667v5.573l-2.667-2.667v-2.907zm0-10.666v-4L28 8l-5.333 5.333v-4H11.76L9.093 6.666h13.573z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"c5f6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar global = __webpack_require__(\"7726\");\nvar has = __webpack_require__(\"69a8\");\nvar cof = __webpack_require__(\"2d95\");\nvar inheritIfRequired = __webpack_require__(\"5dbc\");\nvar toPrimitive = __webpack_require__(\"6a99\");\nvar fails = __webpack_require__(\"79e5\");\nvar gOPN = __webpack_require__(\"9093\").f;\nvar gOPD = __webpack_require__(\"11e9\").f;\nvar dP = __webpack_require__(\"86cc\").f;\nvar $trim = __webpack_require__(\"aa77\").trim;\nvar NUMBER = 'Number';\nvar $Number = global[NUMBER];\nvar Base = $Number;\nvar proto = $Number.prototype;\n// Opera ~12 has broken Object#toString\nvar BROKEN_COF = cof(__webpack_require__(\"2aeb\")(proto)) == NUMBER;\nvar TRIM = 'trim' in String.prototype;\n\n// 7.1.3 ToNumber(argument)\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, false);\n  if (typeof it == 'string' && it.length > 2) {\n    it = TRIM ? it.trim() : $trim(it, 3);\n    var first = it.charCodeAt(0);\n    var third, radix, maxCode;\n    if (first === 43 || first === 45) {\n      third = it.charCodeAt(2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (it.charCodeAt(1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal /^0o[0-7]+$/i\n        default: return +it;\n      }\n      for (var digits = it.slice(2), i = 0, l = digits.length, code; i < l; i++) {\n        code = digits.charCodeAt(i);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\nif (!$Number(' 0o1') || !$Number('0b1') || $Number('+0x1')) {\n  $Number = function Number(value) {\n    var it = arguments.length < 1 ? 0 : value;\n    var that = this;\n    return that instanceof $Number\n      // check on 1..constructor(foo) case\n      && (BROKEN_COF ? fails(function () { proto.valueOf.call(that); }) : cof(that) != NUMBER)\n        ? inheritIfRequired(new Base(toNumber(it)), that, $Number) : toNumber(it);\n  };\n  for (var keys = __webpack_require__(\"9e1e\") ? gOPN(Base) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES6 (in case, if modules with ES6 Number statics required before):\n    'EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,' +\n    'MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (has(Base, key = keys[j]) && !has($Number, key)) {\n      dP($Number, key, gOPD(Base, key));\n    }\n  }\n  $Number.prototype = proto;\n  proto.constructor = $Number;\n  __webpack_require__(\"2aba\")(global, NUMBER, $Number);\n}\n\n\n/***/ }),\n\n/***/ \"c69a\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = !__webpack_require__(\"9e1e\") && !__webpack_require__(\"79e5\")(function () {\n  return Object.defineProperty(__webpack_require__(\"230e\")('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n\n\n/***/ }),\n\n/***/ \"ca5a\":\n/***/ (function(module, exports) {\n\nvar id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n\n\n/***/ }),\n\n/***/ \"cadf\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\nvar addToUnscopables = __webpack_require__(\"9c6c\");\nvar step = __webpack_require__(\"d53b\");\nvar Iterators = __webpack_require__(\"84f2\");\nvar toIObject = __webpack_require__(\"6821\");\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = __webpack_require__(\"01f9\")(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n\n\n/***/ }),\n\n/***/ \"cb7c\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"cd1c\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = __webpack_require__(\"e853\");\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n\n\n/***/ }),\n\n/***/ \"ce10\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar has = __webpack_require__(\"69a8\");\nvar toIObject = __webpack_require__(\"6821\");\nvar arrayIndexOf = __webpack_require__(\"c366\")(false);\nvar IE_PROTO = __webpack_require__(\"613b\")('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n\n\n/***/ }),\n\n/***/ \"d263\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// B.2.3.6 String.prototype.fixed()\n__webpack_require__(\"386b\")('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n\n\n/***/ }),\n\n/***/ \"d2c8\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = __webpack_require__(\"aae3\");\nvar defined = __webpack_require__(\"be13\");\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n\n\n/***/ }),\n\n/***/ \"d3f4\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n\n\n/***/ }),\n\n/***/ \"d53b\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n\n\n/***/ }),\n\n/***/ \"d8e8\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n\n\n/***/ }),\n\n/***/ \"daf8\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 17 32\"}},[_c('path',{attrs:{\"d\":\"M14.08 4.8q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112t-2.88-2.112V6.848q0-2.048 2.88-2.048zm-11.2 0q2.88 0 2.88 2.048v18.24q0 2.112-2.88 2.112T0 25.088V6.848Q0 4.8 2.88 4.8z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"dcbc\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar redefine = __webpack_require__(\"2aba\");\nmodule.exports = function (target, src, safe) {\n  for (var key in src) redefine(target, key, src[key], safe);\n  return target;\n};\n\n\n/***/ }),\n\n/***/ \"e11e\":\n/***/ (function(module, exports) {\n\n// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n\n\n/***/ }),\n\n/***/ \"e853\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar isObject = __webpack_require__(\"d3f4\");\nvar isArray = __webpack_require__(\"1169\");\nvar SPECIES = __webpack_require__(\"2b4c\")('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n\n\n/***/ }),\n\n/***/ \"ebd6\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 7.3.20 SpeciesConstructor(O, defaultConstructor)\nvar anObject = __webpack_require__(\"cb7c\");\nvar aFunction = __webpack_require__(\"d8e8\");\nvar SPECIES = __webpack_require__(\"2b4c\")('species');\nmodule.exports = function (O, D) {\n  var C = anObject(O).constructor;\n  var S;\n  return C === undefined || (S = anObject(C)[SPECIES]) == undefined ? D : aFunction(S);\n};\n\n\n/***/ }),\n\n/***/ \"f559\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n\nvar $export = __webpack_require__(\"5ca1\");\nvar toLength = __webpack_require__(\"9def\");\nvar context = __webpack_require__(\"d2c8\");\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * __webpack_require__(\"5147\")(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n\n\n/***/ }),\n\n/***/ \"f576\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = __webpack_require__(\"5ca1\");\nvar $pad = __webpack_require__(\"2e08\");\nvar userAgent = __webpack_require__(\"a25f\");\n\n// https://github.com/zloirock/core-js/issues/280\n$export($export.P + $export.F * /Version\\/10\\.\\d+(\\.\\d+)? Safari\\//.test(userAgent), 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n\n\n/***/ }),\n\n/***/ \"f605\":\n/***/ (function(module, exports) {\n\nmodule.exports = function (it, Constructor, name, forbiddenField) {\n  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {\n    throw TypeError(name + ': incorrect invocation!');\n  } return it;\n};\n\n\n/***/ }),\n\n/***/ \"f751\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.3.1 Object.assign(target, source)\nvar $export = __webpack_require__(\"5ca1\");\n\n$export($export.S + $export.F, 'Object', { assign: __webpack_require__(\"7333\") });\n\n\n/***/ }),\n\n/***/ \"f866\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n      /* harmony default export */ __webpack_exports__[\"default\"] = ({\n        functional: true,\n        render: \n      function render(_h, _vm) {\n        var _c=_vm._c;return _c('svg',{class:[_vm.data.class, _vm.data.staticClass],style:([_vm.data.style, _vm.data.staticStyle]),attrs:{\"xmlns\":\"http://www.w3.org/2000/svg\",\"viewBox\":\"0 0 29 32\"}},[_c('path',{attrs:{\"d\":\"M9.333 9.333h13.333v4L27.999 8l-5.333-5.333v4h-16v8h2.667V9.334zm13.334 13.334H9.334v-4L4.001 24l5.333 5.333v-4h16v-8h-2.667v5.333z\"}})])\n      }\n    \n      });\n    \n\n/***/ }),\n\n/***/ \"fab2\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar document = __webpack_require__(\"7726\").document;\nmodule.exports = document && document.documentElement;\n\n\n/***/ }),\n\n/***/ \"fb15\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/setPublicPath.js\n// This file is imported into lib/wc client bundles.\n\nif (typeof window !== 'undefined') {\n  var setPublicPath_i\n  if ((setPublicPath_i = window.document.currentScript) && (setPublicPath_i = setPublicPath_i.src.match(/(.+\\/)[^/]+\\.js(\\?.*)?$/))) {\n    __webpack_require__.p = setPublicPath_i[1] // eslint-disable-line\n  }\n}\n\n// Indicate to webpack that this file can be concatenated\n/* harmony default export */ var setPublicPath = (null);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.assign.js\nvar es6_object_assign = __webpack_require__(\"f751\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/defineProperty.js\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectSpread.js\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.number.constructor.js\nvar es6_number_constructor = __webpack_require__(\"c5f6\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArray.js\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\n\n\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/web.dom.iterable.js\nvar web_dom_iterable = __webpack_require__(\"ac6a\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.promise.js\nvar es6_promise = __webpack_require__(\"551c\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.array.includes.js\nvar es7_array_includes = __webpack_require__(\"6762\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.includes.js\nvar es6_string_includes = __webpack_require__(\"2fdb\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.function.name.js\nvar es6_function_name = __webpack_require__(\"7f7f\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find.js\nvar es6_array_find = __webpack_require__(\"7514\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.to-string.js\nvar es6_regexp_to_string = __webpack_require__(\"6b54\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/nonIterableRest.js\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/slicedToArray.js\n\n\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.find-index.js\nvar es6_array_find_index = __webpack_require__(\"20d6\");\n\n// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js\nvar runtime = __webpack_require__(\"96cf\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.fixed.js\nvar es6_string_fixed = __webpack_require__(\"d263\");\n\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/classCallCheck.js\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/createClass.js\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/typeof.js\nfunction _typeof2(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof Symbol === \"function\" && _typeof2(Symbol.iterator) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn.js\n\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n// CONCATENATED MODULE: ./node_modules/@babel/runtime/helpers/esm/inherits.js\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n// EXTERNAL MODULE: ./node_modules/vue-tsx-support/lib/index.js\nvar lib = __webpack_require__(\"48d3\");\n\n// EXTERNAL MODULE: ./node_modules/vue-class-component/dist/vue-class-component.common.js\nvar vue_class_component_common = __webpack_require__(\"65d9\");\nvar vue_class_component_common_default = /*#__PURE__*/__webpack_require__.n(vue_class_component_common);\n\n// EXTERNAL MODULE: external {\"commonjs\":\"vue\",\"commonjs2\":\"vue\",\"root\":\"Vue\"}\nvar external_commonjs_vue_commonjs2_vue_root_Vue_ = __webpack_require__(\"8bbf\");\nvar external_commonjs_vue_commonjs2_vue_root_Vue_default = /*#__PURE__*/__webpack_require__.n(external_commonjs_vue_commonjs2_vue_root_Vue_);\n\n// CONCATENATED MODULE: ./node_modules/vue-property-decorator/lib/vue-property-decorator.js\n/** vue-property-decorator verson 7.2.0 MIT LICENSE copyright 2018 kaorun343 */\n\n\n\n\n/**\n * decorator of an inject\n * @param from key\n * @return PropertyDecorator\n */\nfunction Inject(options) {\n    return Object(vue_class_component_common[\"createDecorator\"])(function (componentOptions, key) {\n        if (typeof componentOptions.inject === 'undefined') {\n            componentOptions.inject = {};\n        }\n        if (!Array.isArray(componentOptions.inject)) {\n            componentOptions.inject[key] = options || key;\n        }\n    });\n}\n/**\n * decorator of a provide\n * @param key key\n * @return PropertyDecorator | void\n */\nfunction Provide(key) {\n    return Object(vue_class_component_common[\"createDecorator\"])(function (componentOptions, k) {\n        var provide = componentOptions.provide;\n        if (typeof provide !== 'function' || !provide.managed) {\n            var original_1 = componentOptions.provide;\n            provide = componentOptions.provide = function () {\n                var rv = Object.create((typeof original_1 === 'function' ? original_1.call(this) : original_1) || null);\n                for (var i in provide.managed)\n                    rv[provide.managed[i]] = this[i];\n                return rv;\n            };\n            provide.managed = {};\n        }\n        provide.managed[k] = key || k;\n    });\n}\n/**\n * decorator of model\n * @param  event event name\n * @param options options\n * @return PropertyDecorator\n */\nfunction Model(event, options) {\n    if (options === void 0) { options = {}; }\n    return Object(vue_class_component_common[\"createDecorator\"])(function (componentOptions, k) {\n        (componentOptions.props || (componentOptions.props = {}))[k] = options;\n        componentOptions.model = { prop: k, event: event || k };\n    });\n}\n/**\n * decorator of a prop\n * @param  options the options for the prop\n * @return PropertyDecorator | void\n */\nfunction Prop(options) {\n    if (options === void 0) { options = {}; }\n    return Object(vue_class_component_common[\"createDecorator\"])(function (componentOptions, k) {\n        (componentOptions.props || (componentOptions.props = {}))[k] = options;\n    });\n}\n/**\n * decorator of a watch function\n * @param  path the path or the expression to observe\n * @param  WatchOption\n * @return MethodDecorator\n */\nfunction Watch(path, options) {\n    if (options === void 0) { options = {}; }\n    var _a = options.deep, deep = _a === void 0 ? false : _a, _b = options.immediate, immediate = _b === void 0 ? false : _b;\n    return Object(vue_class_component_common[\"createDecorator\"])(function (componentOptions, handler) {\n        if (typeof componentOptions.watch !== 'object') {\n            componentOptions.watch = Object.create(null);\n        }\n        componentOptions.watch[path] = { handler: handler, deep: deep, immediate: immediate };\n    });\n}\n// Code copied from Vue/src/shared/util.js\nvar hyphenateRE = /\\B([A-Z])/g;\nvar hyphenate = function (str) { return str.replace(hyphenateRE, '-$1').toLowerCase(); };\n/**\n * decorator of an event-emitter function\n * @param  event The name of the event\n * @return MethodDecorator\n */\nfunction Emit(event) {\n    return function (_target, key, descriptor) {\n        key = hyphenate(key);\n        var original = descriptor.value;\n        descriptor.value = function emitter() {\n            var _this = this;\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i] = arguments[_i];\n            }\n            var emit = function (returnValue) {\n                if (returnValue !== undefined)\n                    args.unshift(returnValue);\n                _this.$emit.apply(_this, [event || key].concat(args));\n            };\n            var returnValue = original.apply(this, args);\n            if (isPromise(returnValue)) {\n                returnValue.then(function (returnValue) {\n                    emit(returnValue);\n                });\n            }\n            else {\n                emit(returnValue);\n            }\n        };\n    };\n}\nfunction isPromise(obj) {\n    return obj instanceof Promise || (obj && typeof obj.then === 'function');\n}\n\n// EXTERNAL MODULE: ./node_modules/classnames/index.js\nvar classnames = __webpack_require__(\"4d26\");\nvar classnames_default = /*#__PURE__*/__webpack_require__.n(classnames);\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.iterator.js\nvar es6_array_iterator = __webpack_require__(\"cadf\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.object.keys.js\nvar es6_object_keys = __webpack_require__(\"456d\");\n\n// CONCATENATED MODULE: ./utils/index.ts\n\nfunction sleep() {\n  var delay = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  return new Promise(function (resolve) {\n    return setTimeout(resolve, delay);\n  });\n}\nfunction eventLoop(target) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;\n  return new Promise(function (resolve, reject) {\n    var startTime = new Date().getTime();\n    var timerId = setInterval(function () {\n      if (!target()) {\n        if (timeout > 0 && new Date().getTime() - startTime > timeout) {\n          reject();\n          clearInterval(timerId);\n        }\n\n        return;\n      }\n\n      resolve();\n      clearInterval(timerId);\n    }, 100);\n  });\n}\n// CONCATENATED MODULE: ./packages/@moefe/vue-audio/events.ts\n/* harmony default export */ var events = (['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'readystatechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']);\n// CONCATENATED MODULE: ./packages/@moefe/vue-audio/index.ts\n\n\n\n\n\n\n\n\n\n\nvar __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\nvar ReadyState;\n\n(function (ReadyState) {\n  /** 没有关于音频是否就绪的信息 */\n  ReadyState[ReadyState[\"HAVE_NOTHING\"] = 0] = \"HAVE_NOTHING\";\n  /** 关于音频就绪的元数据 */\n\n  ReadyState[ReadyState[\"HAVE_METADATA\"] = 1] = \"HAVE_METADATA\";\n  /** 关于当前播放位置的数据是可用的，但没有足够的数据来播放下一帧/毫秒 */\n\n  ReadyState[ReadyState[\"HAVE_CURRENT_DATA\"] = 2] = \"HAVE_CURRENT_DATA\";\n  /** 当前及至少下一帧的数据是可用的 */\n\n  ReadyState[ReadyState[\"HAVE_FUTURE_DATA\"] = 3] = \"HAVE_FUTURE_DATA\";\n  /** 可用数据足以开始播放 */\n\n  ReadyState[ReadyState[\"HAVE_ENOUGH_DATA\"] = 4] = \"HAVE_ENOUGH_DATA\";\n})(ReadyState || (ReadyState = {}));\n\nvar vue_audio_VueAudio =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(VueAudio, _Vue);\n\n  function VueAudio() {\n    var _this;\n\n    _classCallCheck(this, VueAudio);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VueAudio).call(this));\n    _this.audio = new Audio();\n    _this.audioTracks = _this.audio.audioTracks;\n    _this.autoplay = _this.audio.autoplay;\n    _this.buffered = _this.audio.buffered;\n    _this.controls = _this.audio.controls;\n    _this.crossOrigin = _this.audio.crossOrigin;\n    _this.currentSrc = _this.audio.currentSrc;\n    _this.currentTime = _this.audio.currentTime;\n    _this.defaultMuted = _this.audio.defaultMuted;\n    _this.defaultPlaybackRate = _this.audio.defaultPlaybackRate;\n    _this.duration = _this.audio.duration;\n    _this.ended = _this.audio.ended;\n    _this.error = _this.audio.error;\n    _this.loop = _this.audio.loop;\n    _this.mediaKeys = _this.audio.mediaKeys;\n    _this.muted = _this.audio.muted;\n    _this.networkState = _this.audio.networkState;\n    _this.paused = _this.audio.paused;\n    _this.playbackRate = _this.audio.playbackRate;\n    _this.played = _this.audio.played;\n    _this.preload = _this.audio.preload;\n    _this.readyState = _this.audio.readyState;\n    _this.seekable = _this.audio.seekable;\n    _this.seeking = _this.audio.seeking;\n    _this.src = _this.audio.src;\n    _this.textTracks = _this.audio.textTracks;\n    _this.volume = _this.audio.volume;\n    events.forEach(function (event) {\n      _this.audio.addEventListener(event, function (e) {\n        _this.sync();\n      });\n    });\n    return _this;\n  }\n\n  _createClass(VueAudio, [{\n    key: \"sync\",\n    value: function sync() {\n      var _this2 = this;\n\n      Object.keys(this.$data).forEach(function (key) {\n        if (key === 'audio') return;\n        _this2[key] = _this2.audio[key];\n      });\n    }\n  }, {\n    key: \"loaded\",\n    value: function loaded() {\n      var _this3 = this;\n\n      return eventLoop(function () {\n        return _this3.readyState >= ReadyState.HAVE_FUTURE_DATA;\n      }, 0);\n    }\n  }, {\n    key: \"srcLoaded\",\n    value: function srcLoaded() {\n      var _this4 = this;\n\n      return eventLoop(function () {\n        return _this4.src;\n      }, 0);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return VueAudio;\n}(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);\n\nvue_audio_VueAudio = __decorate([vue_class_component_common_default.a, __metadata(\"design:paramtypes\", [])], vue_audio_VueAudio);\n/* harmony default export */ var vue_audio = (vue_audio_VueAudio);\n// CONCATENATED MODULE: ./packages/@moefe/vue-store/index.ts\n\n\n\n\n\n\n\nvar vue_store_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar vue_store_VueStore =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(VueStore, _Vue);\n\n  function VueStore() {\n    var _this;\n\n    _classCallCheck(this, VueStore);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VueStore).apply(this, arguments));\n    _this.key = 'aplayer-setting';\n    _this.store = _this.get(_this.key);\n    return _this;\n  } // eslint-disable-next-line class-methods-use-this\n\n\n  _createClass(VueStore, [{\n    key: \"get\",\n    value: function get(key) {\n      return JSON.parse(localStorage.getItem(key) || '[]');\n    }\n  }, {\n    key: \"set\",\n    value: function set(val) {\n      this.store = val;\n      localStorage.setItem(this.key, JSON.stringify(val));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return VueStore;\n}(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);\n\nvue_store_VueStore = vue_store_decorate([vue_class_component_common_default.a], vue_store_VueStore);\n/* harmony default export */ var vue_store = (vue_store_VueStore);\n// CONCATENATED MODULE: ./utils/mixin.ts\n\n\n\n\n\n\n\nvar mixin_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nvar mixin_Mixin =\n/*#__PURE__*/\nfunction (_Vue) {\n  _inherits(Mixin, _Vue);\n\n  function Mixin() {\n    _classCallCheck(this, Mixin);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Mixin).apply(this, arguments));\n  }\n\n  _createClass(Mixin, [{\n    key: \"isMobile\",\n    get: function get() {\n      var ua = this.$ssrContext ? this.$ssrContext.userAgent : window.navigator.userAgent;\n      return /mobile/i.test(ua);\n    }\n  }]);\n\n  return Mixin;\n}(external_commonjs_vue_commonjs2_vue_root_Vue_default.a);\n\nmixin_Mixin = mixin_decorate([vue_class_component_common_default.a], mixin_Mixin);\n/* harmony default export */ var mixin = (mixin_Mixin);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Cover.tsx\n\n\n\n\n\n\n\nvar Cover_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Cover_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Cover_a;\n\n\n\n\n\nvar Cover_Cover =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Cover, _Vue$Component);\n\n  function Cover() {\n    _classCallCheck(this, Cover);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Cover).apply(this, arguments));\n  }\n\n  _createClass(Cover, [{\n    key: \"handleClick\",\n    value: function handleClick(e) {\n      this.$emit('click', e);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      return h(\"div\", {\n        \"class\": \"aplayer-pic\",\n        style: this.style,\n        on: {\n          \"click\": this.handleClick\n        }\n      }, [this.$slots.default]);\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      var _this$aplayer = this.aplayer,\n          options = _this$aplayer.options,\n          currentTheme = _this$aplayer.currentTheme,\n          currentMusic = _this$aplayer.currentMusic;\n      var cover = currentMusic.cover || options.defaultCover;\n      return {\n        backgroundImage: cover && \"url(\\\"\".concat(cover, \"\\\")\"),\n        backgroundColor: currentTheme\n      };\n    }\n  }]);\n\n  return Cover;\n}(lib[\"Component\"]);\n\nCover_decorate([Inject(), Cover_metadata(\"design:type\", Object)], Cover_Cover.prototype, \"aplayer\", void 0);\n\nCover_Cover = Cover_decorate([vue_class_component_common_default.a], Cover_Cover);\n/* harmony default export */ var components_Cover = (Cover_Cover);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Icon.tsx\n\n\n\n\n\n\n\nvar Icon_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Icon_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\nvar icon = function icon(type) {\n  return __webpack_require__(\"52f0\")(\"./\".concat(type, \".svg\")).default;\n}; // eslint-disable-line\n\nvar Icon_Icon =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Icon, _Vue$Component);\n\n  function Icon() {\n    _classCallCheck(this, Icon);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Icon).apply(this, arguments));\n  }\n\n  _createClass(Icon, [{\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var I = icon(this.type);\n      return h(I);\n    }\n  }]);\n\n  return Icon;\n}(lib[\"Component\"]);\n\nIcon_decorate([Prop({\n  type: String,\n  required: true\n}), Icon_metadata(\"design:type\", String)], Icon_Icon.prototype, \"type\", void 0);\n\nIcon_Icon = Icon_decorate([vue_class_component_common_default.a], Icon_Icon);\n/* harmony default export */ var components_Icon = (Icon_Icon);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.array.sort.js\nvar es6_array_sort = __webpack_require__(\"55dd\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.split.js\nvar es6_regexp_split = __webpack_require__(\"28a5\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.replace.js\nvar es6_regexp_replace = __webpack_require__(\"a481\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.regexp.match.js\nvar es6_regexp_match = __webpack_require__(\"4917\");\n\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/utils/index.ts\n\n\n\n\n/* eslint-disable no-param-reassign */\nfunction shuffle(arr) {\n  for (var i = arr.length - 1; i >= 0; i--) {\n    var randomIndex = Math.floor(Math.random() * (i + 1));\n    var itemAtIndex = arr[randomIndex];\n    arr[randomIndex] = arr[i];\n    arr[i] = itemAtIndex;\n  }\n\n  return arr;\n}\nvar utils_HttpRequest =\n/*#__PURE__*/\nfunction () {\n  function HttpRequest() {\n    _classCallCheck(this, HttpRequest);\n\n    this.xhr = new XMLHttpRequest();\n  }\n\n  _createClass(HttpRequest, [{\n    key: \"download\",\n    value: function download(url) {\n      var _this = this;\n\n      var responseType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      return new Promise(function (resolve, reject) {\n        _this.xhr.open('get', url);\n\n        _this.xhr.responseType = responseType;\n\n        _this.xhr.onload = function () {\n          var status = _this.xhr.status;\n\n          if (status >= 200 && status < 300 || status === 304) {\n            resolve(_this.xhr.response);\n          }\n        };\n\n        _this.xhr.onabort = reject;\n        _this.xhr.onerror = reject;\n        _this.xhr.ontimeout = reject;\n\n        _this.xhr.send();\n      });\n    }\n  }]);\n\n  return HttpRequest;\n}();\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Lyric.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Lyric_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Lyric_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Lyric_a;\n\n\n\n\n\n\n\nvar Lyric_Lyric =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Lyric, _Vue$Component);\n\n  function Lyric() {\n    var _this;\n\n    _classCallCheck(this, Lyric);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Lyric).apply(this, arguments));\n    _this.lrc = '';\n    _this.xhr = new utils_HttpRequest();\n    _this.isLoading = false;\n    return _this;\n  }\n\n  _createClass(Lyric, [{\n    key: \"getLyricFromCurrentMusic\",\n    value: function getLyricFromCurrentMusic() {\n      var _this2 = this;\n\n      return new Promise(function (resolve, reject) {\n        var _this2$aplayer = _this2.aplayer,\n            lrcType = _this2$aplayer.lrcType,\n            currentMusic = _this2$aplayer.currentMusic;\n\n        switch (lrcType) {\n          case 0:\n            resolve('');\n            break;\n\n          case 1:\n            resolve(currentMusic.lrc);\n            break;\n\n          case 3:\n            resolve(currentMusic.lrc ? _this2.xhr.download(currentMusic.lrc) : '');\n            break;\n\n          default:\n            reject(new Error(\"Illegal lrcType: \".concat(lrcType)));\n            break;\n        }\n      });\n    }\n  }, {\n    key: \"parseLRC\",\n    value: function parseLRC(lrc) {\n      var reg = /\\[(\\d+):(\\d+)[.|:](\\d+)\\](.+)/;\n      var regTime = /\\[(\\d+):(\\d+)[.|:](\\d+)\\]/g;\n      var regCompatible = /\\[(\\d+):(\\d+)]()(.+)/;\n      var regTimeCompatible = /\\[(\\d+):(\\d+)]/g;\n      var regOffset = /\\[offset:\\s*(-?\\d+)\\]/;\n      var offsetMatch = this.lrc.match(regOffset);\n      var offset = offsetMatch ? Number(offsetMatch[1]) : 0;\n      var parsed = [];\n\n      var matchAll = function matchAll(line) {\n        var match = line.match(reg) || line.match(regCompatible);\n        if (!match || match.length !== 5) return;\n        var minutes = Number(match[1]) || 0;\n        var seconds = Number(match[2]) || 0;\n        var milliseconds = Number(match[3]) || 0;\n        var time = minutes * 60 * 1000 + seconds * 1000 + milliseconds + offset; // eslint-disable-line no-mixed-operators\n\n        var text = match[4].replace(regTime, '').replace(regTimeCompatible, ''); // 优化：不要显示空行\n\n        if (!text) return;\n        parsed.push({\n          time: time,\n          text: text\n        });\n        matchAll(match[4]); // 递归匹配多个时间标签\n      };\n\n      lrc.replace(/\\\\n/g, '\\n').split('\\n').forEach(function (line) {\n        return matchAll(line);\n      });\n\n      if (parsed.length > 0) {\n        parsed.sort(function (a, b) {\n          return a.time - b.time;\n        });\n      }\n\n      return parsed;\n    }\n  }, {\n    key: \"handleChange\",\n    value: function () {\n      var _handleChange = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                this.isLoading = true;\n                this.lrc = '';\n                _context.next = 5;\n                return this.getLyricFromCurrentMusic();\n\n              case 5:\n                this.lrc = _context.sent;\n\n              case 6:\n                _context.prev = 6;\n                this.isLoading = false;\n                return _context.finish(6);\n\n              case 9:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0,, 6, 9]]);\n      }));\n\n      function handleChange() {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var visible = this.visible,\n          style = this.style,\n          parsed = this.parsed,\n          current = this.current,\n          noLyric = this.noLyric;\n      return h(\"div\", {\n        \"class\": classnames_default()({\n          'aplayer-lrc': true,\n          'aplayer-lrc-hide': !visible\n        })\n      }, [h(\"div\", {\n        \"class\": \"aplayer-lrc-contents\",\n        style: style\n      }, [parsed.length > 0 ? parsed.map(function (item, index) {\n        return h(\"p\", {\n          key: item.time,\n          \"class\": classnames_default()({\n            'aplayer-lrc-current': current.time === item.time\n          })\n        }, [item.text]);\n      }) : h(\"p\", {\n        \"class\": \"aplayer-lrc-current\"\n      }, [noLyric])])]);\n    }\n  }, {\n    key: \"noLyric\",\n    get: function get() {\n      /* eslint-disable no-nested-ternary */\n      var currentMusic = this.aplayer.currentMusic;\n      return !currentMusic.id ? '(ಗ ‸ ಗ ) 未加载音频' : this.isLoading ? '(*ゝω・) 少女祈祷中..' : this.lrc ? '(・∀・*) 抱歉，该歌词格式不支持' : '(,,•́ . •̀,,) 抱歉，当前歌曲暂无歌词';\n      /* eslint-enable no-nested-ternary */\n    }\n  }, {\n    key: \"parsed\",\n    get: function get() {\n      return this.parseLRC(this.lrc);\n    }\n  }, {\n    key: \"current\",\n    get: function get() {\n      var _this$aplayer = this.aplayer,\n          media = _this$aplayer.media,\n          currentPlayed = _this$aplayer.currentPlayed;\n      var match = this.parsed.filter(function (x) {\n        return x.time < currentPlayed * media.duration * 1000;\n      });\n      if (match && match.length > 0) return match[match.length - 1];\n      return this.parsed[0];\n    }\n  }, {\n    key: \"transitionDuration\",\n    get: function get() {\n      return this.parsed.length > 1 ? 500 : 0;\n    }\n  }, {\n    key: \"translateY\",\n    get: function get() {\n      var current = this.current,\n          parsed = this.parsed;\n      if (parsed.length <= 0) return 0;\n      var index = parsed.indexOf(current);\n      var isLast = index === parsed.length - 1;\n      return (isLast ? (index - 1) * 16 : index * 16) * -1;\n    }\n  }, {\n    key: \"style\",\n    get: function get() {\n      return {\n        transitionDuration: \"\".concat(this.transitionDuration, \"ms\"),\n        transform: \"translate3d(0, \".concat(this.translateY, \"px, 0)\")\n      };\n    }\n  }]);\n\n  return Lyric;\n}(lib[\"Component\"]);\n\nLyric_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: true\n}), Lyric_metadata(\"design:type\", Boolean)], Lyric_Lyric.prototype, \"visible\", void 0);\n\nLyric_decorate([Inject(), Lyric_metadata(\"design:type\", Object)], Lyric_Lyric.prototype, \"aplayer\", void 0);\n\nLyric_decorate([Watch('aplayer.lrcType', {\n  immediate: true\n}), Watch('aplayer.currentMusic.lrc', {\n  immediate: true\n}), Lyric_metadata(\"design:type\", Function), Lyric_metadata(\"design:paramtypes\", []), Lyric_metadata(\"design:returntype\", Promise)], Lyric_Lyric.prototype, \"handleChange\", null);\n\nLyric_Lyric = Lyric_decorate([vue_class_component_common_default.a], Lyric_Lyric);\n/* harmony default export */ var components_Lyric = (Lyric_Lyric);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Main.tsx\n\n\n\n\n\n\n\n\n\nvar Main_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Main_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Main_a;\n\n\n\n\n\n\nvar Main_Main =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Main, _Vue$Component);\n\n  function Main() {\n    _classCallCheck(this, Main);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Main).apply(this, arguments));\n  }\n\n  _createClass(Main, [{\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var music = this.music;\n      var fixed = this.aplayer.fixed;\n      return h(\"div\", {\n        \"class\": \"aplayer-info\"\n      }, [h(\"div\", {\n        \"class\": \"aplayer-music\"\n      }, [h(\"span\", {\n        \"class\": \"aplayer-title\"\n      }, [music.name]), h(\"span\", {\n        \"class\": \"aplayer-author\"\n      }, [music.artist])]), !fixed ? h(components_Lyric) : null, this.$slots.default]);\n    }\n  }, {\n    key: \"music\",\n    get: function get() {\n      var currentMusic = this.aplayer.currentMusic;\n      return {\n        name: currentMusic.name,\n        artist: currentMusic.artist ? \" - \".concat(currentMusic.artist) : ''\n      };\n    }\n  }]);\n\n  return Main;\n}(lib[\"Component\"]);\n\nMain_decorate([Inject(), Main_metadata(\"design:type\", Object)], Main_Main.prototype, \"aplayer\", void 0);\n\nMain_Main = Main_decorate([vue_class_component_common_default.a], Main_Main);\n/* harmony default export */ var components_Main = (Main_Main);\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es6.string.starts-with.js\nvar es6_string_starts_with = __webpack_require__(\"f559\");\n\n// EXTERNAL MODULE: ./node_modules/core-js/modules/es7.string.pad-start.js\nvar es7_string_pad_start = __webpack_require__(\"f576\");\n\n// CONCATENATED MODULE: ./packages/@moefe/vue-touch/index.tsx\n\n\n\n\n\n\n\n\nvar vue_touch_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar vue_touch_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\nvar vue_touch_Touch =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Touch, _Vue$Component);\n\n  function Touch() {\n    var _this;\n\n    _classCallCheck(this, Touch);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Touch).apply(this, arguments));\n    _this.isDragMove = false;\n    return _this;\n  }\n\n  _createClass(Touch, [{\n    key: \"thumbMove\",\n    value: function thumbMove(e) {\n      this.isDragMove = true;\n      this.$emit('panMove', e);\n    }\n  }, {\n    key: \"thumbUp\",\n    value: function thumbUp(e) {\n      document.removeEventListener(this.dragMove, this.thumbMove);\n      document.removeEventListener(this.dragEnd, this.thumbUp);\n      this.isDragMove = false;\n      this.$emit('panEnd', e);\n    }\n  }, {\n    key: \"mounted\",\n    value: function mounted() {\n      var _this2 = this;\n\n      this.$el.addEventListener(this.dragStart, function (e) {\n        _this2.$emit('panStart', e);\n\n        document.addEventListener(_this2.dragMove, _this2.thumbMove);\n        document.addEventListener(_this2.dragEnd, _this2.thumbUp);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      return h(\"div\", {\n        \"class\": this.classNames,\n        style: {\n          touchAction: 'none',\n          userSelect: 'none',\n          webkitUserDrag: 'none',\n          webkitTapHighlightColor: 'rgba(0, 0, 0, 0)'\n        }\n      }, [this.$slots.default]);\n    }\n  }, {\n    key: \"classNames\",\n    get: function get() {\n      var panMoveClass = this.panMoveClass,\n          isDragMove = this.isDragMove;\n      return _defineProperty({}, panMoveClass, isDragMove);\n    }\n  }, {\n    key: \"dragStart\",\n    get: function get() {\n      return this.isMobile ? 'touchstart' : 'mousedown';\n    }\n  }, {\n    key: \"dragMove\",\n    get: function get() {\n      return this.isMobile ? 'touchmove' : 'mousemove';\n    }\n  }, {\n    key: \"dragEnd\",\n    get: function get() {\n      return this.isMobile ? 'touchend' : 'mouseup';\n    }\n  }]);\n\n  return Touch;\n}(lib[\"Component\"]);\n\nvue_touch_decorate([Prop({\n  type: String,\n  required: false\n}), vue_touch_metadata(\"design:type\", String)], vue_touch_Touch.prototype, \"panMoveClass\", void 0);\n\nvue_touch_Touch = vue_touch_decorate([vue_class_component_common_default()({\n  mixins: [mixin]\n})], vue_touch_Touch);\n/* harmony default export */ var vue_touch = (vue_touch_Touch);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Button.tsx\n\n\n\n\n\n\n\nvar Button_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Button_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\n\n\n\n\n\nvar Button_Button =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Button, _Vue$Component);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Button).apply(this, arguments));\n  }\n\n  _createClass(Button, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.$emit('click');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      return h(\"button\", {\n        attrs: {\n          type: \"button\"\n        },\n        \"class\": \"aplayer-icon aplayer-icon-\".concat(this.type),\n        on: {\n          \"click\": this.handleClick\n        }\n      }, [h(components_Icon, {\n        attrs: {\n          type: this.icon\n        }\n      })]);\n    }\n  }]);\n\n  return Button;\n}(lib[\"Component\"]);\n\nButton_decorate([Prop({\n  type: String,\n  required: true\n}), Button_metadata(\"design:type\", String)], Button_Button.prototype, \"type\", void 0);\n\nButton_decorate([Prop({\n  type: String,\n  required: true\n}), Button_metadata(\"design:type\", String)], Button_Button.prototype, \"icon\", void 0);\n\nButton_Button = Button_decorate([vue_class_component_common_default.a], Button_Button);\n/* harmony default export */ var components_Button = (Button_Button);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Progress.tsx\n\n\n\n\n\n\n\n\nvar Progress_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Progress_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Progress_a;\n\n\n\n\n\n\n\nvar Progress_Progress =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Progress, _Vue$Component);\n\n  function Progress() {\n    _classCallCheck(this, Progress);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Progress).apply(this, arguments));\n  }\n\n  _createClass(Progress, [{\n    key: \"handleChange\",\n    value: function handleChange(e) {\n      var target = this.$refs.progressBar;\n      var targetLeft = target.getBoundingClientRect().left;\n      var clientX = !e.type.startsWith('touch') ? e.clientX : e.changedTouches[0].clientX;\n      var offsetLeft = clientX - targetLeft;\n      var percent = offsetLeft / target.offsetWidth;\n      percent = Math.min(percent, 1);\n      percent = Math.max(percent, 0);\n      this.handleChangeProgress(e, percent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var _this$aplayer = this.aplayer,\n          currentTheme = _this$aplayer.currentTheme,\n          currentLoaded = _this$aplayer.currentLoaded,\n          currentPlayed = _this$aplayer.currentPlayed;\n      return h(vue_touch, {\n        \"class\": \"aplayer-bar-wrap\",\n        on: {\n          \"panMove\": this.handleChange,\n          \"panEnd\": this.handleChange\n        }\n      }, [h(\"div\", {\n        ref: \"progressBar\",\n        \"class\": \"aplayer-bar\"\n      }, [h(\"div\", {\n        \"class\": \"aplayer-loaded\",\n        style: {\n          width: \"\".concat(currentLoaded * 100, \"%\")\n        }\n      }), h(\"div\", {\n        \"class\": \"aplayer-played\",\n        style: {\n          width: \"\".concat(currentPlayed * 100, \"%\"),\n          backgroundColor: currentTheme\n        }\n      }, [h(\"span\", {\n        \"class\": \"aplayer-thumb\",\n        style: {\n          backgroundColor: currentTheme\n        }\n      }, [h(\"span\", {\n        \"class\": \"aplayer-loading-icon\"\n      }, [h(components_Icon, {\n        attrs: {\n          type: \"loading\"\n        }\n      })])])])])]);\n    }\n  }]);\n\n  return Progress;\n}(lib[\"Component\"]);\n\nProgress_decorate([Inject(), Progress_metadata(\"design:type\", Object)], Progress_Progress.prototype, \"aplayer\", void 0);\n\nProgress_decorate([Inject(), Progress_metadata(\"design:type\", Function)], Progress_Progress.prototype, \"handleChangeProgress\", void 0);\n\nProgress_Progress = Progress_decorate([vue_class_component_common_default.a], Progress_Progress);\n/* harmony default export */ var components_Progress = (Progress_Progress);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Controller.tsx\n\n\n\n\n\n\n\n\n\n\nvar Controller_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Controller_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Controller_a;\n\n\n\n\n\n\n\n\n\nvar Controller_Controller =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Controller, _Vue$Component);\n\n  function Controller() {\n    _classCallCheck(this, Controller);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Controller).apply(this, arguments));\n  }\n\n  _createClass(Controller, [{\n    key: \"timeSecondsFormat\",\n    // eslint-disable-next-line class-methods-use-this\n    value: function timeSecondsFormat() {\n      var time = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var minutes = Math.floor(time / 60) || 0;\n      var seconds = Math.floor(time % 60) || 0;\n      return \"\".concat(minutes.toString().padStart(2, '0'), \":\").concat(seconds.toString().padStart(2, '0')); // prettier-ignore\n    }\n  }, {\n    key: \"handleToggleVolume\",\n    value: function handleToggleVolume() {\n      var _this$aplayer = this.aplayer,\n          currentVolume = _this$aplayer.currentVolume,\n          currentSettings = _this$aplayer.currentSettings;\n      this.handleChangeVolume(currentVolume > 0 ? 0 : currentSettings.volume);\n    }\n  }, {\n    key: \"handleClickVolumeBar\",\n    value: function handleClickVolumeBar(e) {\n      this.handlePanMove(e);\n    }\n  }, {\n    key: \"handlePanMove\",\n    value: function handlePanMove(e) {\n      var target = this.$refs.volumeBar;\n      var targetTop = target.getBoundingClientRect().bottom;\n      if (targetTop <= 0) return; // 音量控制面板已隐藏\n\n      var clientY = !e.type.startsWith('touch') ? e.clientY : e.changedTouches[0].clientY;\n      var offsetTop = Math.round(targetTop - clientY);\n      var volume = offsetTop / target.offsetHeight;\n      volume = Math.min(volume, 1);\n      volume = Math.max(volume, 0);\n      this.handleChangeVolume(volume);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var ptime = this.ptime,\n          dtime = this.dtime,\n          volumeIcon = this.volumeIcon;\n      var _this$aplayer2 = this.aplayer,\n          lrcType = _this$aplayer2.lrcType,\n          currentTheme = _this$aplayer2.currentTheme,\n          currentVolume = _this$aplayer2.currentVolume,\n          currentOrder = _this$aplayer2.currentOrder,\n          currentLoop = _this$aplayer2.currentLoop;\n      return h(\"div\", {\n        \"class\": \"aplayer-controller\"\n      }, [h(components_Progress), h(\"div\", {\n        \"class\": \"aplayer-time\"\n      }, [h(\"span\", {\n        \"class\": \"aplayer-time-inner\"\n      }, [h(\"span\", {\n        \"class\": \"aplayer-ptime\"\n      }, [ptime]), \" /\", ' ', h(\"span\", {\n        \"class\": \"aplayer-dtime\"\n      }, [dtime]), ' ']), h(\"span\", {\n        \"class\": \"aplayer-icon aplayer-icon-back\",\n        on: {\n          \"click\": this.handleSkipBack\n        }\n      }, [h(components_Icon, {\n        attrs: {\n          type: \"skip\"\n        }\n      })]), h(\"span\", {\n        \"class\": \"aplayer-icon aplayer-icon-play\",\n        on: {\n          \"click\": this.handleTogglePlay\n        }\n      }, [h(components_Icon, {\n        attrs: {\n          type: this.playIcon\n        }\n      })]), h(\"span\", {\n        \"class\": \"aplayer-icon aplayer-icon-forward\",\n        on: {\n          \"click\": this.handleSkipForward\n        }\n      }, [h(components_Icon, {\n        attrs: {\n          type: \"skip\"\n        }\n      })]), h(\"div\", {\n        \"class\": \"aplayer-volume-wrap\"\n      }, [h(components_Button, {\n        attrs: {\n          type: \"volume-\".concat(volumeIcon),\n          icon: \"volume-\".concat(volumeIcon)\n        },\n        on: {\n          \"click\": this.handleToggleVolume\n        }\n      }), h(vue_touch, {\n        \"class\": \"aplayer-volume-bar-wrap\",\n        attrs: {\n          panMoveClass: \"aplayer-volume-bar-wrap-active\"\n        },\n        on: {\n          \"panMove\": this.handlePanMove\n        }\n      }, [h(\"div\", {\n        ref: \"volumeBar\",\n        \"class\": \"aplayer-volume-bar\",\n        on: {\n          \"click\": this.handleClickVolumeBar\n        }\n      }, [h(\"div\", {\n        \"class\": \"aplayer-volume\",\n        style: {\n          height: \"\".concat(currentVolume * 100, \"%\"),\n          backgroundColor: currentTheme\n        }\n      })])])]), ' ', h(components_Button, {\n        attrs: {\n          type: \"order\",\n          icon: \"order-\".concat(currentOrder)\n        },\n        on: {\n          \"click\": this.handleToggleOrderMode\n        }\n      }), ' ', h(components_Button, {\n        attrs: {\n          type: \"loop\",\n          icon: \"loop-\".concat(currentLoop)\n        },\n        on: {\n          \"click\": this.handleToggleLoopMode\n        }\n      }), ' ', h(components_Button, {\n        attrs: {\n          type: \"menu\",\n          icon: \"menu\"\n        },\n        on: {\n          \"click\": this.handleTogglePlaylist\n        }\n      }), lrcType !== 0 ? h(components_Button, {\n        attrs: {\n          type: \"lrc\",\n          icon: \"lrc\"\n        },\n        on: {\n          \"click\": this.handleToggleLyric\n        }\n      }) : null])]);\n    }\n  }, {\n    key: \"playIcon\",\n    get: function get() {\n      return this.aplayer.media.paused ? 'play' : 'pause';\n    }\n  }, {\n    key: \"volumeIcon\",\n    get: function get() {\n      var currentVolume = this.aplayer.currentVolume;\n      return currentVolume <= 0 ? 'off' : currentVolume >= 0.95 ? 'up' : 'down'; // eslint-disable-line no-nested-ternary\n    }\n  }, {\n    key: \"ptime\",\n    get: function get() {\n      var _this$aplayer3 = this.aplayer,\n          media = _this$aplayer3.media,\n          currentPlayed = _this$aplayer3.currentPlayed;\n      return this.timeSecondsFormat(currentPlayed * media.duration);\n    }\n  }, {\n    key: \"dtime\",\n    get: function get() {\n      return this.timeSecondsFormat(this.aplayer.media.duration);\n    }\n  }]);\n\n  return Controller;\n}(lib[\"Component\"]);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Object)], Controller_Controller.prototype, \"aplayer\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleSkipBack\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleSkipForward\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleTogglePlay\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleToggleOrderMode\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleToggleLoopMode\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleTogglePlaylist\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleToggleLyric\", void 0);\n\nController_decorate([Inject(), Controller_metadata(\"design:type\", Function)], Controller_Controller.prototype, \"handleChangeVolume\", void 0);\n\nController_Controller = Controller_decorate([vue_class_component_common_default.a], Controller_Controller);\n/* harmony default export */ var components_Controller = (Controller_Controller);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/Player.tsx\n\n\n\n\n\n\n\n\nvar Player_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar Player_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar Player_a, Player_b;\n\n\n\n\n\n\n\n\n\n\nvar Player_Player =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(Player, _Vue$Component);\n\n  function Player() {\n    _classCallCheck(this, Player);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(Player).apply(this, arguments));\n  }\n\n  _createClass(Player, [{\n    key: \"handleTogglePlay\",\n    value: function handleTogglePlay() {\n      this.$emit('togglePlay');\n    }\n  }, {\n    key: \"handleSkipBack\",\n    value: function handleSkipBack() {\n      this.$emit('skipBack');\n    }\n  }, {\n    key: \"handleSkipForward\",\n    value: function handleSkipForward() {\n      this.$emit('skipForward');\n    }\n  }, {\n    key: \"handleToggleOrderMode\",\n    value: function handleToggleOrderMode() {\n      this.$emit('toggleOrderMode');\n    }\n  }, {\n    key: \"handleToggleLoopMode\",\n    value: function handleToggleLoopMode() {\n      this.$emit('toggleLoopMode');\n    }\n  }, {\n    key: \"handleTogglePlaylist\",\n    value: function handleTogglePlaylist() {\n      this.$emit('togglePlaylist');\n    }\n  }, {\n    key: \"handleToggleLyric\",\n    value: function handleToggleLyric() {\n      this.$emit('toggleLyric');\n    }\n  }, {\n    key: \"handleChangeVolume\",\n    value: function handleChangeVolume(volume) {\n      this.$emit('changeVolume', volume);\n    }\n  }, {\n    key: \"handleChangeProgress\",\n    value: function handleChangeProgress(e, percent) {\n      this.$emit('changeProgress', e, percent);\n    }\n  }, {\n    key: \"handleMiniSwitcher\",\n    value: function handleMiniSwitcher() {\n      this.$emit('miniSwitcher');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var playIcon = this.playIcon,\n          notice = this.notice;\n      return h(\"div\", {\n        \"class\": \"aplayer-body\"\n      }, [h(components_Cover, {\n        on: {\n          \"click\": this.handleTogglePlay\n        }\n      }, [h(\"div\", {\n        \"class\": \"aplayer-button aplayer-\".concat(playIcon)\n      }, [h(components_Icon, {\n        attrs: {\n          type: playIcon\n        }\n      })])]), h(components_Main, [h(components_Controller, {\n        on: {\n          \"skipBack\": this.handleSkipBack,\n          \"skipForward\": this.handleSkipForward,\n          \"togglePlay\": this.handleTogglePlay,\n          \"toggleOrderMode\": this.handleToggleOrderMode,\n          \"toggleLoopMode\": this.handleToggleLoopMode,\n          \"togglePlaylist\": this.handleTogglePlaylist,\n          \"toggleLyric\": this.handleToggleLyric,\n          \"changeVolume\": this.handleChangeVolume,\n          \"changeProgress\": this.handleChangeProgress\n        }\n      })]), h(\"div\", {\n        \"class\": \"aplayer-notice\",\n        style: {\n          opacity: notice.opacity\n        }\n      }, [notice.text]), h(\"div\", {\n        \"class\": \"aplayer-miniswitcher\",\n        on: {\n          \"click\": this.handleMiniSwitcher\n        }\n      }, [h(components_Button, {\n        attrs: {\n          type: \"miniswitcher\",\n          icon: \"right\"\n        }\n      })])]);\n    }\n  }, {\n    key: \"playIcon\",\n    get: function get() {\n      return this.aplayer.media.paused ? 'play' : 'pause';\n    }\n  }]);\n\n  return Player;\n}(lib[\"Component\"]);\n\nPlayer_decorate([Prop({\n  type: Object,\n  required: true\n}), Player_metadata(\"design:type\", Object)], Player_Player.prototype, \"notice\", void 0);\n\nPlayer_decorate([Inject(), Player_metadata(\"design:type\", Object)], Player_Player.prototype, \"aplayer\", void 0);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleTogglePlay\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleSkipBack\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleSkipForward\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleToggleOrderMode\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleToggleLoopMode\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleTogglePlaylist\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", []), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleToggleLyric\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", [Number]), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleChangeVolume\", null);\n\nPlayer_decorate([Provide(), Player_metadata(\"design:type\", Function), Player_metadata(\"design:paramtypes\", [Object, Number]), Player_metadata(\"design:returntype\", void 0)], Player_Player.prototype, \"handleChangeProgress\", null);\n\nPlayer_Player = Player_decorate([vue_class_component_common_default.a], Player_Player);\n/* harmony default export */ var components_Player = (Player_Player);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/PlayList.tsx\n\n\n\n\n\n\n\n\n\n\n\n\nvar PlayList_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar PlayList_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar PlayList_a, PlayList_b, _c;\n\n\n\n\n\n\nvar PlayList_PlayList =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(PlayList, _Vue$Component);\n\n  function PlayList() {\n    _classCallCheck(this, PlayList);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(PlayList).apply(this, arguments));\n  }\n\n  _createClass(PlayList, [{\n    key: \"handleChangeScrollTop\",\n    value: function () {\n      var _handleChangeScrollTop = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.$nextTick();\n\n              case 2:\n                if (this.visible) {\n                  this.$refs.list.scrollTop = this.scrollTop;\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleChangeScrollTop() {\n        return _handleChangeScrollTop.apply(this, arguments);\n      }\n\n      return handleChangeScrollTop;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var h = arguments[0];\n      var listHeight = this.listHeight,\n          dataSource = this.dataSource,\n          currentMusic = this.currentMusic;\n      var currentTheme = this.aplayer.currentTheme;\n      return h(\"ol\", {\n        ref: \"list\",\n        \"class\": \"aplayer-list\",\n        style: {\n          height: \"\".concat(listHeight, \"px\")\n        }\n      }, [dataSource.map(function (item, index) {\n        return h(\"li\", {\n          key: item.id,\n          \"class\": classnames_default()({\n            'aplayer-list-light': item.id === currentMusic.id\n          }),\n          on: {\n            \"click\": function click() {\n              return _this.$emit('change', item, index);\n            }\n          }\n        }, [h(\"span\", {\n          \"class\": \"aplayer-list-cur\",\n          style: {\n            backgroundColor: currentTheme\n          }\n        }), h(\"span\", {\n          \"class\": \"aplayer-list-index\"\n        }, [index + 1]), ' ', h(\"span\", {\n          \"class\": \"aplayer-list-title\"\n        }, [item.name]), h(\"span\", {\n          \"class\": \"aplayer-list-author\"\n        }, [item.artist])]);\n      })]);\n    }\n  }, {\n    key: \"listHeight\",\n    get: function get() {\n      var visible = this.visible,\n          dataSource = this.dataSource;\n      return visible ? Math.min(dataSource.length * 33, Number(this.aplayer.listMaxHeight)) : 0;\n    }\n  }]);\n\n  return PlayList;\n}(lib[\"Component\"]);\n\nPlayList_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: true\n}), PlayList_metadata(\"design:type\", Boolean)], PlayList_PlayList.prototype, \"visible\", void 0);\n\nPlayList_decorate([Prop({\n  type: Object,\n  required: true\n}), PlayList_metadata(\"design:type\", typeof (PlayList_a = typeof APlayer !== \"undefined\" && APlayer.Audio) === \"function\" ? PlayList_a : Object)], PlayList_PlayList.prototype, \"currentMusic\", void 0);\n\nPlayList_decorate([Prop({\n  type: Array,\n  required: true\n}), PlayList_metadata(\"design:type\", typeof (PlayList_b = typeof Array !== \"undefined\" && Array) === \"function\" ? PlayList_b : Object)], PlayList_PlayList.prototype, \"dataSource\", void 0);\n\nPlayList_decorate([Prop({\n  type: Number,\n  required: true\n}), PlayList_metadata(\"design:type\", Number)], PlayList_PlayList.prototype, \"scrollTop\", void 0);\n\nPlayList_decorate([Inject(), PlayList_metadata(\"design:type\", Object)], PlayList_PlayList.prototype, \"aplayer\", void 0);\n\nPlayList_decorate([Watch('scrollTop', {\n  immediate: true\n}), Watch('dataSource', {\n  immediate: true,\n  deep: true\n}), Watch('visible'), PlayList_metadata(\"design:type\", Function), PlayList_metadata(\"design:paramtypes\", []), PlayList_metadata(\"design:returntype\", Promise)], PlayList_PlayList.prototype, \"handleChangeScrollTop\", null);\n\nPlayList_PlayList = PlayList_decorate([vue_class_component_common_default.a], PlayList_PlayList);\n/* harmony default export */ var components_PlayList = (PlayList_PlayList);\n// EXTERNAL MODULE: ./packages/@moefe/vue-aplayer/assets/style/aplayer.scss\nvar aplayer = __webpack_require__(\"610a\");\n\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/components/APlayer.tsx\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar APlayer_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar APlayer_metadata = undefined && undefined.__metadata || function (k, v) {\n  if ((typeof Reflect === \"undefined\" ? \"undefined\" : _typeof(Reflect)) === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nvar APlayer_a, APlayer_b, APlayer_c, _d, _e, _f, _g, _h;\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar instances = [];\nvar store = new vue_store();\nvar channel = null;\n\nif (typeof BroadcastChannel !== 'undefined') {\n  channel = new BroadcastChannel('aplayer');\n}\n\nvar APlayer_APlayer =\n/*#__PURE__*/\nfunction (_Vue$Component) {\n  _inherits(APlayer, _Vue$Component);\n\n  function APlayer() {\n    var _this;\n\n    _classCallCheck(this, APlayer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(APlayer).apply(this, arguments)); // 是否正在拖动进度条（防止抖动）\n\n    _this.isDraggingProgressBar = false; // 是否正在等待进度条更新（防止抖动）\n\n    _this.isAwaitChangeProgressBar = false; // 是否是迷你模式\n\n    _this.isMini = _this.mini !== null ? _this.mini : _this.fixed; // 是否是 arrow 模式\n\n    _this.isArrow = false; // 当 currentMusic 改变时是否允许播放\n\n    _this.canPlay = !_this.isMobile && _this.autoplay; // 播放列表是否可见\n\n    _this.listVisible = !_this.listFolded; // 控制迷你模式下的歌词是否可见\n\n    _this.lyricVisible = true; // 封面图片对象\n\n    _this.img = new Image(); // 封面下载对象\n\n    _this.xhr = new utils_HttpRequest(); // 响应式媒体对象\n\n    _this.media = new vue_audio(); // 核心音频对象\n\n    _this.player = _this.media.audio; // 播放器设置存储对象\n\n    _this.store = store; // 当前播放的音乐\n\n    _this.currentMusic = {\n      id: NaN,\n      name: '未加载音频',\n      artist: '(ಗ ‸ ಗ )',\n      url: ''\n    }; // 当前已播放比例\n\n    _this.currentPlayed = 0; // 当前音量\n\n    _this.currentVolume = _this.volume; // 当前循环模式\n\n    _this.currentLoop = _this.loop; // 当前顺序模式\n\n    _this.currentOrder = _this.order; // 当前主题，通过封面自适应主题 > 当前播放的音乐指定的主题 > 主题选项\n\n    _this.currentTheme = _this.currentMusic.theme || _this.theme; // 通知对象\n\n    _this.notice = {\n      text: '',\n      time: 2000,\n      opacity: 0\n    };\n    return _this;\n  } // #endregion\n  // 提供当前实例的引用，让子组件获取该实例的可响应数据\n\n\n  _createClass(APlayer, [{\n    key: \"handleChangePlayList\",\n    // #region 监听属性\n    value: function () {\n      var _handleChangePlayList = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee(newList, oldList) {\n        var newLength, oldLength, _this$currentMusic, id, url, oldIndex, _this$currentList, music;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (oldList) {\n                  newLength = newList.length;\n                  oldLength = oldList.length;\n\n                  if (newLength !== oldLength) {\n                    if (newLength <= 0) this.$emit('listClear');else if (newLength > oldLength) this.$emit('listAdd');else {\n                      if (this.currentOrderIndex < 0) {\n                        _this$currentMusic = this.currentMusic, id = _this$currentMusic.id, url = _this$currentMusic.url;\n                        oldIndex = oldList.findIndex(function (item) {\n                          return item.id === id || item.url === url;\n                        });\n                        Object.assign(this.currentMusic, oldList[oldIndex - 1]);\n                      }\n\n                      this.canPlay = !this.player.paused;\n                      this.$emit('listRemove');\n                    }\n                  }\n                } // 播放列表初始化\n\n\n                if (!(this.orderList.length > 0)) {\n                  _context.next = 6;\n                  break;\n                }\n\n                if (!this.currentMusic.id) {\n                  _this$currentList = _slicedToArray(this.currentList, 1);\n                  this.currentMusic = _this$currentList[0];\n                } else {\n                  this.canPlay = !this.player.paused;\n                  music = this.orderList[this.currentOrderIndex] || this.orderList[0]; // eslint-disable-line max-len\n\n                  Object.assign(this.currentMusic, music);\n                }\n\n                _context.next = 5;\n                return this.$nextTick();\n\n              case 5:\n                this.canPlay = true;\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function handleChangePlayList(_x, _x2) {\n        return _handleChangePlayList.apply(this, arguments);\n      }\n\n      return handleChangePlayList;\n    }()\n  }, {\n    key: \"handleChangeCurrentMusic\",\n    value: function () {\n      var _handleChangeCurrentMusic = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3(newMusic, oldMusic) {\n        var _this2 = this;\n\n        var cover, src;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (newMusic.theme) {\n                  this.currentTheme = newMusic.theme;\n                } else {\n                  cover = newMusic.cover || this.options.defaultCover;\n\n                  if (cover) {\n                    setTimeout(\n                    /*#__PURE__*/\n                    _asyncToGenerator(\n                    /*#__PURE__*/\n                    regeneratorRuntime.mark(function _callee2() {\n                      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n                        while (1) {\n                          switch (_context2.prev = _context2.next) {\n                            case 0:\n                              _context2.prev = 0;\n                              _context2.next = 3;\n                              return _this2.getThemeColorFromCover(cover);\n\n                            case 3:\n                              _this2.currentTheme = _context2.sent;\n                              _context2.next = 9;\n                              break;\n\n                            case 6:\n                              _context2.prev = 6;\n                              _context2.t0 = _context2[\"catch\"](0);\n                              _this2.currentTheme = newMusic.theme || _this2.theme;\n\n                            case 9:\n                            case \"end\":\n                              return _context2.stop();\n                          }\n                        }\n                      }, _callee2, this, [[0, 6]]);\n                    })));\n                  }\n                }\n\n                if (!newMusic.url) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                if (!((oldMusic !== undefined && oldMusic.url) !== newMusic.url || this.player.src !== newMusic.url)) {\n                  _context3.next = 14;\n                  break;\n                }\n\n                this.currentPlayed = 0;\n\n                if (oldMusic && oldMusic.id) {\n                  // 首次初始化时不要触发事件\n                  this.handleChangeSettings();\n                  this.$emit('listSwitch', newMusic);\n                }\n\n                _context3.next = 7;\n                return this.getAudioUrl(newMusic);\n\n              case 7:\n                src = _context3.sent;\n                if (src) this.player.src = src;\n                this.player.playbackRate = newMusic.speed || 1;\n                this.player.preload = this.preload;\n                this.player.volume = this.currentVolume;\n                this.player.currentTime = 0;\n\n                this.player.onerror = function (e) {\n                  _this2.showNotice(e.toString());\n                };\n\n              case 14:\n                // **请勿移动此行**，否则当歌曲结束播放时如果歌单中只有一首歌曲将无法重复播放\n                if (this.canPlay) this.play();\n\n              case 15:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleChangeCurrentMusic(_x3, _x4) {\n        return _handleChangeCurrentMusic.apply(this, arguments);\n      }\n\n      return handleChangeCurrentMusic;\n    }()\n  }, {\n    key: \"handleChangeVolume\",\n    value: function handleChangeVolume(volume) {\n      this.currentVolume = volume;\n    }\n  }, {\n    key: \"handleChangeCurrentVolume\",\n    value: function handleChangeCurrentVolume() {\n      this.player.volume = this.currentVolume;\n      this.$emit('update:volume', this.currentVolume);\n    }\n  }, {\n    key: \"handleChangeCurrentTime\",\n    value: function handleChangeCurrentTime() {\n      if (!this.isDraggingProgressBar && !this.isAwaitChangeProgressBar) {\n        this.currentPlayed = this.media.currentTime / this.media.duration || 0;\n      }\n    }\n  }, {\n    key: \"handleChangeSettings\",\n    value: function handleChangeSettings() {\n      var settings = {\n        currentTime: this.media.currentTime,\n        duration: this.media.duration,\n        paused: this.media.paused,\n        mini: this.isMini,\n        lrc: this.lyricVisible,\n        list: this.listVisible,\n        volume: this.currentVolume,\n        loop: this.currentLoop,\n        order: this.currentOrder,\n        music: this.currentMusic\n      };\n\n      if (settings.volume <= 0) {\n        settings.volume = this.currentSettings.volume;\n      }\n\n      this.saveSettings(settings);\n    }\n  }, {\n    key: \"handleChangeEnded\",\n    value: function handleChangeEnded() {\n      if (!this.media.ended) return;\n      this.currentPlayed = 0;\n\n      switch (this.currentLoop) {\n        default:\n        case 'all':\n          this.handleSkipForward();\n          break;\n\n        case 'one':\n          this.play();\n          break;\n\n        case 'none':\n          if (this.currentIndex === this.currentList.length - 1) {\n            var _this$currentList2 = _slicedToArray(this.currentList, 1);\n\n            this.currentMusic = _this$currentList2[0];\n            this.pause();\n            this.canPlay = false;\n          } else this.handleSkipForward();\n\n          break;\n      }\n    }\n  }, {\n    key: \"handleChangeMini\",\n    value: function handleChangeMini() {\n      this.isMini = this.mini;\n    }\n  }, {\n    key: \"handleChangeCurrentMini\",\n    value: function () {\n      var _handleChangeCurrentMini = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(newVal, oldVal) {\n        var container;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.$nextTick();\n\n              case 2:\n                container = this.$refs.container;\n                this.isArrow = container && container.offsetWidth <= 300;\n\n                if (oldVal !== undefined) {\n                  this.$emit('update:mini', this.isMini);\n                  this.handleChangeSettings();\n                }\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleChangeCurrentMini(_x5, _x6) {\n        return _handleChangeCurrentMini.apply(this, arguments);\n      }\n\n      return handleChangeCurrentMini;\n    }()\n  }, {\n    key: \"handleChangeLoop\",\n    value: function handleChangeLoop() {\n      this.currentLoop = this.loop;\n    }\n  }, {\n    key: \"handleChangeCurrentLoop\",\n    value: function handleChangeCurrentLoop() {\n      this.$emit('update:loop', this.currentLoop);\n      this.handleChangeSettings();\n    }\n  }, {\n    key: \"handleChangeOrder\",\n    value: function handleChangeOrder() {\n      this.currentOrder = this.order;\n    }\n  }, {\n    key: \"handleChangeCurrentOrder\",\n    value: function handleChangeCurrentOrder() {\n      this.$emit('update:order', this.currentOrder);\n      this.handleChangeSettings();\n    }\n  }, {\n    key: \"handleChangeListVisible\",\n    value: function handleChangeListVisible() {\n      this.$emit(this.listVisible ? 'listShow' : 'listHide');\n      this.$emit('update:listFolded', this.listVisible);\n      this.handleChangeSettings();\n    }\n  }, {\n    key: \"handleChangeLyricVisible\",\n    value: function handleChangeLyricVisible() {\n      this.$emit(this.lyricVisible ? 'lrcShow' : 'lrcHide');\n      this.handleChangeSettings();\n    } // #endregion\n    // #region 公开 API\n\n  }, {\n    key: \"play\",\n    value: function () {\n      var _play = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5() {\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                if (this.mutex) this.pauseOtherInstances();\n                _context5.next = 4;\n                return this.player.play();\n\n              case 4:\n                _context5.next = 10;\n                break;\n\n              case 6:\n                _context5.prev = 6;\n                _context5.t0 = _context5[\"catch\"](0);\n                this.showNotice(_context5.t0.message);\n                this.player.pause();\n\n              case 10:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 6]]);\n      }));\n\n      function play() {\n        return _play.apply(this, arguments);\n      }\n\n      return play;\n    }()\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.player.pause();\n    }\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      if (this.media.paused) this.play();else this.pause();\n    }\n  }, {\n    key: \"seeking\",\n    value: function () {\n      var _seeking = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee6(percent) {\n        var paused,\n            oldPaused,\n            _args6 = arguments;\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                paused = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : true;\n                _context6.prev = 1;\n                this.isAwaitChangeProgressBar = true;\n\n                if (!(this.preload === 'none')) {\n                  _context6.next = 11;\n                  break;\n                }\n\n                if (this.player.src) {\n                  _context6.next = 7;\n                  break;\n                }\n\n                _context6.next = 7;\n                return this.media.srcLoaded();\n\n              case 7:\n                oldPaused = this.player.paused;\n                _context6.next = 10;\n                return this.play();\n\n              case 10:\n                // preload 为 none 的情况下必须先 play\n                if (paused && oldPaused) this.pause();\n\n              case 11:\n                if (paused) this.pause();\n                _context6.next = 14;\n                return this.media.loaded();\n\n              case 14:\n                this.player.currentTime = percent * this.media.duration;\n\n                if (!paused) {\n                  this.play();\n\n                  if (channel && this.mutex) {\n                    channel.postMessage('mutex');\n                  }\n                }\n\n                _context6.next = 21;\n                break;\n\n              case 18:\n                _context6.prev = 18;\n                _context6.t0 = _context6[\"catch\"](1);\n                this.showNotice(_context6.t0.message);\n\n              case 21:\n                _context6.prev = 21;\n                this.isAwaitChangeProgressBar = false;\n                return _context6.finish(21);\n\n              case 24:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[1, 18, 21, 24]]);\n      }));\n\n      function seeking(_x7) {\n        return _seeking.apply(this, arguments);\n      }\n\n      return seeking;\n    }()\n  }, {\n    key: \"seek\",\n    value: function seek(time) {\n      this.seeking(time / this.media.duration, this.media.paused);\n    }\n  }, {\n    key: \"switch\",\n    value: function _switch(audio) {\n      switch (_typeof(audio)) {\n        case 'number':\n          this.currentMusic = this.orderList[Math.min(Math.max(0, audio), this.orderList.length - 1)];\n          break;\n        // eslint-disable-next-line no-case-declarations\n\n        default:\n          var music = this.orderList.find(function (item) {\n            return typeof item.name === 'string' && item.name.includes(audio);\n          });\n          if (music) this.currentMusic = music;\n          break;\n      }\n    }\n  }, {\n    key: \"skipBack\",\n    value: function skipBack() {\n      var playIndex = this.getPlayIndexByMode('skipBack');\n      this.currentMusic = _objectSpread({}, this.currentList[playIndex]);\n    }\n  }, {\n    key: \"skipForward\",\n    value: function skipForward() {\n      var playIndex = this.getPlayIndexByMode('skipForward');\n      this.currentMusic = _objectSpread({}, this.currentList[playIndex]);\n    }\n  }, {\n    key: \"showLrc\",\n    value: function showLrc() {\n      this.lyricVisible = true;\n    }\n  }, {\n    key: \"hideLrc\",\n    value: function hideLrc() {\n      this.lyricVisible = false;\n    }\n  }, {\n    key: \"toggleLrc\",\n    value: function toggleLrc() {\n      this.lyricVisible = !this.lyricVisible;\n    }\n  }, {\n    key: \"showList\",\n    value: function showList() {\n      this.listVisible = true;\n    }\n  }, {\n    key: \"hideList\",\n    value: function hideList() {\n      this.listVisible = false;\n    }\n  }, {\n    key: \"toggleList\",\n    value: function toggleList() {\n      this.listVisible = !this.listVisible;\n    }\n  }, {\n    key: \"showNotice\",\n    value: function showNotice(text) {\n      var _this3 = this;\n\n      var time = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2000;\n      var opacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.8;\n      return new Promise(function (resolve) {\n        if (_this3.isMini) {\n          // eslint-disable-next-line no-console\n          console.warn('aplayer notice:', text);\n          resolve();\n        } else {\n          _this3.notice = {\n            text: text,\n            time: time,\n            opacity: opacity\n          };\n\n          _this3.$emit('noticeShow');\n\n          if (time > 0) {\n            setTimeout(function () {\n              _this3.notice.opacity = 0;\n\n              _this3.$emit('noticeHide');\n\n              resolve();\n            }, time);\n          }\n        }\n      });\n    } // #endregion\n    // #region 私有 API\n    // 从封面中获取主题颜色\n\n  }, {\n    key: \"getThemeColorFromCover\",\n    value: function getThemeColorFromCover(url) {\n      var _this4 = this;\n\n      return new Promise(\n      /*#__PURE__*/\n      function () {\n        var _ref2 = _asyncToGenerator(\n        /*#__PURE__*/\n        regeneratorRuntime.mark(function _callee7(resolve, reject) {\n          var image, reader;\n          return regeneratorRuntime.wrap(function _callee7$(_context7) {\n            while (1) {\n              switch (_context7.prev = _context7.next) {\n                case 0:\n                  _context7.prev = 0;\n\n                  if (!(typeof ColorThief !== 'undefined')) {\n                    _context7.next = 12;\n                    break;\n                  }\n\n                  _context7.next = 4;\n                  return _this4.xhr.download(url, 'blob');\n\n                case 4:\n                  image = _context7.sent;\n                  reader = new FileReader();\n\n                  reader.onload = function () {\n                    _this4.img.src = reader.result;\n\n                    _this4.img.onload = function () {\n                      var _getColor = new ColorThief().getColor(_this4.img),\n                          _getColor2 = _slicedToArray(_getColor, 3),\n                          r = _getColor2[0],\n                          g = _getColor2[1],\n                          b = _getColor2[2];\n\n                      var theme = \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n                      resolve(theme || _this4.currentMusic.theme || _this4.theme);\n                    };\n\n                    _this4.img.onabort = reject;\n                    _this4.img.onerror = reject;\n                  };\n\n                  reader.onabort = reject;\n                  reader.onerror = reject;\n                  reader.readAsDataURL(image);\n                  _context7.next = 13;\n                  break;\n\n                case 12:\n                  resolve(_this4.currentMusic.theme || _this4.theme);\n\n                case 13:\n                  _context7.next = 18;\n                  break;\n\n                case 15:\n                  _context7.prev = 15;\n                  _context7.t0 = _context7[\"catch\"](0);\n                  resolve(_this4.currentMusic.theme || _this4.theme);\n\n                case 18:\n                case \"end\":\n                  return _context7.stop();\n              }\n            }\n          }, _callee7, this, [[0, 15]]);\n        }));\n\n        return function (_x8, _x9) {\n          return _ref2.apply(this, arguments);\n        };\n      }());\n    }\n  }, {\n    key: \"getAudioUrl\",\n    value: function getAudioUrl(music) {\n      var _this5 = this;\n\n      return new Promise(function (resolve, reject) {\n        var type = music.type;\n\n        if (type && _this5.customAudioType && _this5.customAudioType[type]) {\n          if (typeof _this5.customAudioType[type] === 'function') {\n            _this5.customAudioType[type](_this5.player, music, _this5);\n          } else {\n            // eslint-disable-next-line no-console\n            console.error(\"Illegal customType: \".concat(type));\n          }\n\n          resolve();\n        } else {\n          if (!type || type === 'auto') {\n            type = /m3u8(#|\\?|$)/i.test(music.url) ? 'hls' : 'normal';\n          }\n\n          if (type === 'hls') {\n            try {\n              if (Hls.isSupported()) {\n                var hls = new Hls();\n                hls.loadSource(music.url);\n                hls.attachMedia(_this5.player);\n                resolve();\n              } else if (_this5.player.canPlayType('application/x-mpegURL') || _this5.player.canPlayType('application/vnd.apple.mpegURL')) {\n                resolve(music.url);\n              } else {\n                reject(new Error('HLS is not supported.'));\n              }\n            } catch (e) {\n              reject(new Error('HLS is not supported.'));\n            }\n          } else {\n            resolve(music.url);\n          }\n        }\n      });\n    }\n  }, {\n    key: \"getPlayIndexByMode\",\n    value: function getPlayIndexByMode(type) {\n      var length = this.currentList.length;\n      var index = this.currentIndex;\n      return (type === 'skipBack' ? length + (index - 1) : index + 1) % length;\n    }\n  }, {\n    key: \"pauseOtherInstances\",\n    value: function pauseOtherInstances() {\n      var _this6 = this;\n\n      instances.filter(function (inst) {\n        return inst !== _this6;\n      }).forEach(function (inst) {\n        return inst.pause();\n      });\n    }\n  }, {\n    key: \"saveSettings\",\n    value: function saveSettings(settings) {\n      var instanceIndex = instances.indexOf(this);\n      if (settings === null) delete instances[instanceIndex];\n      this.store.set(this.settings[instanceIndex] !== undefined ? this.settings.map(function (item, index) {\n        return index === instanceIndex ? settings : item;\n      }) : _toConsumableArray(this.settings).concat([settings]));\n    } // #endregion\n    // #region 事件处理\n    // 切换上一曲\n\n  }, {\n    key: \"handleSkipBack\",\n    value: function handleSkipBack() {\n      this.skipBack();\n    } // 切换下一曲\n\n  }, {\n    key: \"handleSkipForward\",\n    value: function handleSkipForward() {\n      this.skipForward();\n    } // 切换播放\n\n  }, {\n    key: \"handleTogglePlay\",\n    value: function handleTogglePlay() {\n      this.toggle();\n    } // 处理切换顺序模式\n\n  }, {\n    key: \"handleToggleOrderMode\",\n    value: function handleToggleOrderMode() {\n      this.currentOrder = this.currentOrder === 'list' ? 'random' : 'list';\n    } // 处理切换循环模式\n\n  }, {\n    key: \"handleToggleLoopMode\",\n    value: function handleToggleLoopMode() {\n      this.currentLoop = this.currentLoop === 'all' ? 'one' : this.currentLoop === 'one' ? 'none' : 'all';\n    } // 处理切换播放/暂停事件\n\n  }, {\n    key: \"handleTogglePlaylist\",\n    value: function handleTogglePlaylist() {\n      this.toggleList();\n    } // 处理切换歌词显隐事件\n\n  }, {\n    key: \"handleToggleLyric\",\n    value: function handleToggleLyric() {\n      this.toggleLrc();\n    } // 处理进度条改变事件\n\n  }, {\n    key: \"handleChangeProgress\",\n    value: function handleChangeProgress(e, percent) {\n      this.currentPlayed = percent;\n      this.isDraggingProgressBar = e.type.includes('move');\n\n      if (['touchend', 'mouseup'].includes(e.type)) {\n        this.seeking(percent, this.media.paused); // preload 为 none 的情况下无法获取到 duration\n      }\n    } // 处理切换迷你模式事件\n\n  }, {\n    key: \"handleMiniSwitcher\",\n    value: function handleMiniSwitcher() {\n      this.isMini = !this.isMini;\n    } // 处理播放曲目改变事件\n\n  }, {\n    key: \"handleChangePlaylist\",\n    value: function handleChangePlaylist(music, index) {\n      if (music.id === this.currentMusic.id) this.handleTogglePlay();else this.currentMusic = this.orderList[index];\n    } // #endregion\n\n  }, {\n    key: \"beforeMount\",\n    value: function beforeMount() {\n      var _this7 = this;\n\n      this.store.key = this.storageName;\n      var emptyIndex = instances.findIndex(function (x) {\n        return !x;\n      });\n      if (emptyIndex > -1) instances[emptyIndex] = this;else instances.push(this);\n\n      if (this.currentSettings) {\n        var _this$currentSettings = this.currentSettings,\n            mini = _this$currentSettings.mini,\n            lrc = _this$currentSettings.lrc,\n            list = _this$currentSettings.list,\n            volume = _this$currentSettings.volume,\n            loop = _this$currentSettings.loop,\n            order = _this$currentSettings.order,\n            music = _this$currentSettings.music,\n            currentTime = _this$currentSettings.currentTime,\n            duration = _this$currentSettings.duration,\n            paused = _this$currentSettings.paused;\n        this.isMini = mini;\n        this.lyricVisible = lrc;\n        this.listVisible = list;\n        this.currentVolume = volume;\n        this.currentLoop = loop;\n        this.currentOrder = order;\n\n        if (music) {\n          this.currentMusic = music;\n\n          if (!this.isMobile && duration) {\n            this.seeking(currentTime / duration, paused);\n          }\n        }\n      } // 处理多页面互斥\n\n\n      if (channel) {\n        if (this.mutex) {\n          channel.addEventListener('message', function (_ref3) {\n            var data = _ref3.data;\n            if (data === 'mutex') _this7.pause();\n          });\n        }\n      } else {// 不支持 BroadcastChannel，暂不处理\n      }\n\n      events.forEach(function (event) {\n        _this7.player.addEventListener(event, function (e) {\n          return _this7.$emit(event, e);\n        });\n      });\n    }\n  }, {\n    key: \"beforeDestroy\",\n    value: function beforeDestroy() {\n      this.pause();\n      this.saveSettings(null);\n      this.$emit('destroy');\n      this.$el.remove();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var h = arguments[0];\n      var dataSource = this.dataSource,\n          fixed = this.fixed,\n          lrcType = this.lrcType,\n          isMini = this.isMini,\n          isMobile = this.isMobile,\n          isArrow = this.isArrow,\n          isLoading = this.isLoading,\n          notice = this.notice,\n          listVisible = this.listVisible,\n          listScrollTop = this.listScrollTop,\n          currentMusic = this.currentMusic,\n          lyricVisible = this.lyricVisible;\n      return h(\"div\", {\n        ref: \"container\",\n        \"class\": classnames_default()({\n          aplayer: true,\n          'aplayer-withlist': dataSource.length > 1,\n          'aplayer-withlrc': !fixed && lrcType !== 0 && lyricVisible,\n          'aplayer-narrow': isMini,\n          'aplayer-fixed': fixed,\n          'aplayer-mobile': isMobile,\n          'aplayer-arrow': isArrow,\n          'aplayer-loading': isLoading\n        })\n      }, [h(components_Player, {\n        attrs: {\n          notice: notice\n        },\n        on: {\n          \"skipBack\": this.handleSkipBack,\n          \"skipForward\": this.handleSkipForward,\n          \"togglePlay\": this.handleTogglePlay,\n          \"toggleOrderMode\": this.handleToggleOrderMode,\n          \"toggleLoopMode\": this.handleToggleLoopMode,\n          \"togglePlaylist\": this.handleTogglePlaylist,\n          \"toggleLyric\": this.handleToggleLyric,\n          \"changeVolume\": this.handleChangeVolume,\n          \"changeProgress\": this.handleChangeProgress,\n          \"miniSwitcher\": this.handleMiniSwitcher\n        }\n      }), h(components_PlayList, {\n        attrs: {\n          visible: listVisible,\n          scrollTop: listScrollTop,\n          currentMusic: currentMusic,\n          dataSource: dataSource\n        },\n        on: {\n          \"change\": this.handleChangePlaylist\n        }\n      }), fixed && lrcType !== 0 ? h(components_Lyric, {\n        attrs: {\n          visible: lyricVisible\n        }\n      }) : null]);\n    }\n  }, {\n    key: \"aplayer\",\n    get: function get() {\n      return this;\n    }\n  }, {\n    key: \"settings\",\n    get: function get() {\n      return this.store.store;\n    }\n  }, {\n    key: \"currentSettings\",\n    get: function get() {\n      return this.settings[instances.indexOf(this)];\n    } // 当前播放模式对应的播放列表\n\n  }, {\n    key: \"currentList\",\n    get: function get() {\n      return this.currentOrder === 'list' ? this.orderList : this.randomList;\n    } // 数据源，自动生成 ID 作为播放列表项的 key\n\n  }, {\n    key: \"dataSource\",\n    get: function get() {\n      return (Array.isArray(this.audio) ? this.audio : [this.audio]).filter(function (x) {\n        return x;\n      }).map(function (item, index) {\n        return _objectSpread({\n          id: index + 1\n        }, item);\n      });\n    } // 根据数据源生成顺序播放列表（处理 VNode）\n\n  }, {\n    key: \"orderList\",\n    get: function get() {\n      var text = function text(vnode, key) {\n        return typeof vnode === 'string' ? vnode : vnode.data && vnode.data.attrs && vnode.data.attrs[\"data-\".concat(key)];\n      };\n\n      return this.dataSource.map(function (_ref4) {\n        var name = _ref4.name,\n            artist = _ref4.artist,\n            item = _objectWithoutProperties(_ref4, [\"name\", \"artist\"]);\n\n        return _objectSpread({}, item, {\n          name: text(name, 'name'),\n          artist: text(artist, 'artist')\n        });\n      });\n    } // 根据顺序播放列表生成随机播放列表\n\n  }, {\n    key: \"randomList\",\n    get: function get() {\n      return shuffle(_toConsumableArray(this.orderList));\n    } // 是否正在缓冲\n\n  }, {\n    key: \"isLoading\",\n    get: function get() {\n      var preload = this.preload,\n          currentPlayed = this.currentPlayed,\n          currentLoaded = this.currentLoaded;\n      var _this$media = this.media,\n          src = _this$media.src,\n          paused = _this$media.paused,\n          duration = _this$media.duration;\n      var loading = !!src && (currentPlayed > currentLoaded || !duration);\n      return preload === 'none' ? !paused && loading : loading;\n    }\n  }, {\n    key: \"listScrollTop\",\n    get: function get() {\n      return this.currentOrderIndex * 33;\n    } // 当前播放的音乐索引\n\n  }, {\n    key: \"currentIndex\",\n    get: function get() {\n      return this.currentOrder === 'list' ? this.currentOrderIndex : this.currentRandomIndex;\n    }\n  }, {\n    key: \"currentOrderIndex\",\n    get: function get() {\n      var _this$currentMusic2 = this.currentMusic,\n          id = _this$currentMusic2.id,\n          url = _this$currentMusic2.url;\n      return this.orderList.findIndex(function (item) {\n        return item.id === id || item.url === url;\n      });\n    }\n  }, {\n    key: \"currentRandomIndex\",\n    get: function get() {\n      var _this$currentMusic3 = this.currentMusic,\n          id = _this$currentMusic3.id,\n          url = _this$currentMusic3.url;\n      return this.randomList.findIndex(function (item) {\n        return item.id === id || item.url === url;\n      });\n    } // 当前已缓冲比例\n\n  }, {\n    key: \"currentLoaded\",\n    get: function get() {\n      if (this.media.readyState < ReadyState.HAVE_FUTURE_DATA) return 0;\n      var length = this.media.buffered.length;\n      return length > 0 ? this.media.buffered.end(length - 1) / this.media.duration : 1;\n    }\n  }]);\n\n  return APlayer;\n}(lib[\"Component\"]);\n\nAPlayer_APlayer.version = \"2.0.0-beta.5\";\n\nAPlayer_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: false\n}), APlayer_metadata(\"design:type\", Boolean)], APlayer_APlayer.prototype, \"fixed\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: null\n}), APlayer_metadata(\"design:type\", Boolean)], APlayer_APlayer.prototype, \"mini\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: false\n}), APlayer_metadata(\"design:type\", Boolean)], APlayer_APlayer.prototype, \"autoplay\", void 0);\n\nAPlayer_decorate([Prop({\n  type: String,\n  required: false,\n  default: '#b7daff'\n}), APlayer_metadata(\"design:type\", String)], APlayer_APlayer.prototype, \"theme\", void 0);\n\nAPlayer_decorate([Prop({\n  type: String,\n  required: false,\n  default: 'all'\n}), APlayer_metadata(\"design:type\", typeof (APlayer_a = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.LoopMode) === \"function\" ? APlayer_a : Object)], APlayer_APlayer.prototype, \"loop\", void 0);\n\nAPlayer_decorate([Prop({\n  type: String,\n  required: false,\n  default: 'list'\n}), APlayer_metadata(\"design:type\", typeof (APlayer_b = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.OrderMode) === \"function\" ? APlayer_b : Object)], APlayer_APlayer.prototype, \"order\", void 0);\n\nAPlayer_decorate([Prop({\n  type: String,\n  required: false,\n  default: 'auto'\n}), APlayer_metadata(\"design:type\", typeof (APlayer_c = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.Preload) === \"function\" ? APlayer_c : Object)], APlayer_APlayer.prototype, \"preload\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Number,\n  required: false,\n  default: 0.7\n}), APlayer_metadata(\"design:type\", Number)], APlayer_APlayer.prototype, \"volume\", void 0);\n\nAPlayer_decorate([Prop({\n  type: [Object, Array],\n  required: true\n}), APlayer_metadata(\"design:type\", Object)], APlayer_APlayer.prototype, \"audio\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Object,\n  required: false\n}), APlayer_metadata(\"design:type\", Object)], APlayer_APlayer.prototype, \"customAudioType\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: true\n}), APlayer_metadata(\"design:type\", Boolean)], APlayer_APlayer.prototype, \"mutex\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Number,\n  required: false,\n  default: 0\n}), APlayer_metadata(\"design:type\", typeof (_f = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.LrcType) === \"function\" ? _f : Object)], APlayer_APlayer.prototype, \"lrcType\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Boolean,\n  required: false,\n  default: false\n}), APlayer_metadata(\"design:type\", Boolean)], APlayer_APlayer.prototype, \"listFolded\", void 0);\n\nAPlayer_decorate([Prop({\n  type: Number,\n  required: false,\n  default: 250\n}), APlayer_metadata(\"design:type\", Number)], APlayer_APlayer.prototype, \"listMaxHeight\", void 0);\n\nAPlayer_decorate([Prop({\n  type: String,\n  required: false,\n  default: 'aplayer-setting'\n}), APlayer_metadata(\"design:type\", String)], APlayer_APlayer.prototype, \"storageName\", void 0);\n\nAPlayer_decorate([Provide(), APlayer_metadata(\"design:type\", Object), APlayer_metadata(\"design:paramtypes\", [])], APlayer_APlayer.prototype, \"aplayer\", null);\n\nAPlayer_decorate([Watch('orderList', {\n  immediate: true,\n  deep: true\n}), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", [Array, Array]), APlayer_metadata(\"design:returntype\", Promise)], APlayer_APlayer.prototype, \"handleChangePlayList\", null);\n\nAPlayer_decorate([Watch('currentMusic', {\n  immediate: true,\n  deep: true\n}), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", [typeof (_g = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.Audio) === \"function\" ? _g : Object, typeof (_h = typeof APlayer_APlayer !== \"undefined\" && APlayer_APlayer.Audio) === \"function\" ? _h : Object]), APlayer_metadata(\"design:returntype\", Promise)], APlayer_APlayer.prototype, \"handleChangeCurrentMusic\", null);\n\nAPlayer_decorate([Watch('volume'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", [Number]), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeVolume\", null);\n\nAPlayer_decorate([Watch('currentVolume'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeCurrentVolume\", null);\n\nAPlayer_decorate([Watch('media.currentTime'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeCurrentTime\", null);\n\nAPlayer_decorate([Watch('media.$data', {\n  deep: true\n}), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeSettings\", null);\n\nAPlayer_decorate([Watch('media.ended'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeEnded\", null);\n\nAPlayer_decorate([Watch('mini'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeMini\", null);\n\nAPlayer_decorate([Watch('isMini', {\n  immediate: true\n}), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", [Boolean, Boolean]), APlayer_metadata(\"design:returntype\", Promise)], APlayer_APlayer.prototype, \"handleChangeCurrentMini\", null);\n\nAPlayer_decorate([Watch('loop'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeLoop\", null);\n\nAPlayer_decorate([Watch('currentLoop'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeCurrentLoop\", null);\n\nAPlayer_decorate([Watch('order'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeOrder\", null);\n\nAPlayer_decorate([Watch('currentOrder'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeCurrentOrder\", null);\n\nAPlayer_decorate([Watch('listVisible'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeListVisible\", null);\n\nAPlayer_decorate([Watch('lyricVisible'), APlayer_metadata(\"design:type\", Function), APlayer_metadata(\"design:paramtypes\", []), APlayer_metadata(\"design:returntype\", void 0)], APlayer_APlayer.prototype, \"handleChangeLyricVisible\", null);\n\nAPlayer_APlayer = APlayer_decorate([vue_class_component_common_default()({\n  mixins: [mixin]\n})], APlayer_APlayer);\n/* harmony default export */ var components_APlayer = (APlayer_APlayer);\n// CONCATENATED MODULE: ./packages/@moefe/vue-aplayer/index.ts\n\n\n\n\nfunction install(Vue, options) {\n  var defaultOptions = {\n    productionTip: true,\n    defaultCover: 'https://avatars2.githubusercontent.com/u/20062482?s=270'\n  };\n\n  var opts = _objectSpread({}, defaultOptions, options);\n\n  Object.assign(components_APlayer.prototype, {\n    options: opts\n  });\n  Vue.component('aplayer', components_APlayer);\n  Vue.component('APlayer', components_APlayer);\n\n  if (opts.productionTip) {\n    // eslint-disable-next-line no-console\n    console.log(\"%c vue-aplayer %c v\".concat(\"2.0.0-beta.5\", \" \").concat(\"dd10c50\", \" %c\"), 'background: #35495e; padding: 1px; border-radius: 3px 0 0 3px; color: #fff', 'background: #41b883; padding: 1px; border-radius: 0 3px 3px 0; color: #fff', 'background: transparent');\n  }\n}\n// CONCATENATED MODULE: ./node_modules/@vue/cli-service/lib/commands/build/entry-lib.js\n/* concated harmony reexport APlayer */__webpack_require__.d(__webpack_exports__, \"APlayer\", function() { return components_APlayer; });\n\n\n/* harmony default export */ var entry_lib = __webpack_exports__[\"default\"] = (install);\n\n\n\n/***/ }),\n\n/***/ \"fdef\":\n/***/ (function(module, exports) {\n\nmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n/***/ })\n\n/******/ });\n//# sourceMappingURL=VueAPlayer.common.js.map"]}]}